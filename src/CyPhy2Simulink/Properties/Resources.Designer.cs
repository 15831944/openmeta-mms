//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CyPhy2Simulink.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CyPhy2Simulink.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function [ handle ] = CreateOrOverwriteModel( modelName )
        ///%UNTITLED Summary of this function goes here
        ///%   Detailed explanation goes here
        ///if exist(modelName,&apos;file&apos;) == 4
        ///    % If it does then check whether it&apos;s open
        ///    if bdIsLoaded(modelName)
        ///        % If it is then close it (without saving!)
        ///        close_system(modelName,0)
        ///    end
        ///    % delete the file
        ///    delete([modelName,&apos;.slx&apos;]);
        ///end
        ///
        ///handle = new_system(modelName);
        ///
        ///end
        ///
        ///.
        /// </summary>
        internal static string CreateOrOverwriteModel {
            get {
                return ResourceManager.GetString("CreateOrOverwriteModel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #!/usr/bin/env
        ///
        ///import json
        ///import string
        ///def main():
        ///    with open(&quot;testbench_manifest.json&quot;, &apos;r&apos;) as file_in:
        ///        manifestJson = json.load(file_in)
        ///
        ///    params = {}
        ///
        ///    for param in manifestJson[&quot;Parameters&quot;]:
        ///        params[param[&quot;Name&quot;]] = str(param[&quot;Value&quot;])
        ///
        ///    with open(&quot;build_simulink.m.in&quot;, &apos;r&apos;) as templateFile, open(&quot;build_simulink.m&quot;, &quot;w&quot;) as outputFile:
        ///        for line in templateFile:
        ///            lineTemplate = string.Template(line)
        ///            outputFile.write(lineTempla [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PopulateTestBenchParams {
            get {
                return ResourceManager.GetString("PopulateTestBenchParams", resourceCulture);
            }
        }
    }
}
