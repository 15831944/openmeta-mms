using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using GME.CSharp;
using ISIS.GME.Common.Classes;
using ISIS.GME.Dsml.CyPhyML.Interfaces;

namespace CyPhy2Simulink.Simulink
{
    public class SimulinkModel
    {
        public List<SimulinkBlock> Blocks { get; private set; }

        public IDictionary<string, string> SimulationParams { get; private set; }

        public List<string> UserLibraries { get; private set; }

        public SimulinkModel()
        {
            Blocks = new List<SimulinkBlock>();
            SimulationParams = new Dictionary<string, string>();
            UserLibraries = new List<string>();
        }

        public SimulinkModel(TestBench testBench) : this()
        {
            //Iterate through TB to find blocks
            testBench.TraverseDFS(children => children, (child, i) =>
            {
                if (child is GenericDomainModel)
                {
                    var block = SimulinkBlock.FromDomainModel((GenericDomainModel)child);
                    if (block != null)
                    {
                        SimulinkGenerator.GMEConsole.Info.Write("Added block {0} ({1})", block.Name, block.BlockType);
                        Blocks.Add(block);
                    }
                }
            });

            foreach (var param in testBench.Children.ParameterCollection)
            {
                if (!param.AllDstConnections.Any() && !param.AllSrcConnections.Any())
                {
                    if (param.Name == "CopyFile")
                    {
                        //Ignore
                    } else if (param.Name == "UserLibrary"  && param.Attributes.Value != "")
                    {
                        var baseName = Path.GetFileNameWithoutExtension(param.Attributes.Value);

                        UserLibraries.Add(baseName);
                    }
                    else
                    {
                        if (param.Attributes.Value != "")
                        {
                            SimulationParams[param.Name] = param.Attributes.Value;
                        }
                    }
                }
            }
        }

        public void GenerateSimulinkModelCode(TextWriter writer)
        {
            writer.WriteLine("% Generated by CyPhy2Simulink on {0}", DateTime.Now);
            writer.WriteLine();
            writer.WriteLine("disp('Generating Simulink model; don''t close this window');");
            writer.WriteLine();

            foreach (var lib in UserLibraries)
            {
                writer.WriteLine("load_system('{0}');", lib);
            }
            writer.WriteLine("sys = CreateOrOverwriteModel('NewModel');");

            writer.WriteLine("load_system(sys);");
            writer.WriteLine();
            writer.WriteLine("try");

            foreach (var block in Blocks)
            {
                block.GenerateSimulinkBlockCode(writer);
            }

            foreach (var block in Blocks)
            {
                block.GenerateSimulinkConnectionCode(writer);
            }

            writer.WriteLine("catch me");
            writer.WriteLine("save_system();");
            writer.WriteLine("close_system();");
            writer.WriteLine("rethrow(me);");
            writer.WriteLine("end");
            writer.WriteLine("save_system();");
            writer.WriteLine("close_system();");
        }

        public void GenerateSimulinkExecutionCode(TextWriter writer)
        {
            writer.WriteLine("% Generated by CyPhy2Simulink on {0}", DateTime.Now);
            writer.WriteLine();
            writer.WriteLine("disp('Running Simulink simulation; don''t close this window');");
            writer.WriteLine();
            writer.WriteLine("load_system('NewModel');");
            writer.WriteLine("try");
            writer.Write("sim(gcs");

            foreach (var param in SimulationParams)
            {
                writer.Write(", '{0}', '{1}'", param.Key, param.Value);
            }

            writer.WriteLine(");");
            writer.WriteLine("catch me");
            writer.WriteLine("save_system();");
            writer.WriteLine("close_system();");
            writer.WriteLine("rethrow(me);");
            writer.WriteLine("end");

            writer.WriteLine("save_system();");
            writer.WriteLine("close_system();");
        }
    }

    public class SimulinkBlock
    {
        public string Name { get; private set; }
        
        public string BlockType { get; private set; }

        public List<SimulinkPort> OutgoingPorts { get; private set; }

        public List<SimulinkParameter> Parameters { get; private set; }

        public SimulinkBlock(string name, string blockType)
        {
            Name = name;
            BlockType = blockType;
            OutgoingPorts = new List<SimulinkPort>();
            Parameters = new List<SimulinkParameter>();
        }

        public static SimulinkBlock FromDomainModel(GenericDomainModel domainModel)
        {
            if (!DomainModelIsSimulink(domainModel))
            {
                return null;
            }

            var result = new SimulinkBlock(GetParentComponentName(domainModel), domainModel.Attributes.Type);

            foreach (var param in domainModel.Children.GenericDomainModelParameterCollection)
            {
                var simulinkParam = SimulinkParameter.FromDomainParameter(param);
                if (simulinkParam != null)
                {
                    result.Parameters.Add(simulinkParam);
                }
            }

            foreach (var port in domainModel.Children.GenericDomainModelPortCollection)
            {
                var simulinkPort = SimulinkPort.FromDomainPort(port);
                if (simulinkPort != null)
                {
                    result.OutgoingPorts.Add(simulinkPort);
                }
            }

            return result;
        }

        public static bool DomainModelIsSimulink(GenericDomainModel domainModel)
        {
            return domainModel.Attributes.Domain == "simulink";
        }

        public static string GetParentComponentName(GenericDomainModel domainModel)
        {
            return domainModel.ParentContainer.Name;
        }

        public void GenerateSimulinkBlockCode(TextWriter writer)
        {
            writer.WriteLine("add_block('{0}', [gcs, '/{1}']);", BlockType, Name);

            foreach (var param in Parameters)
            {
                if (param.TestBenchParameterName == null)
                {
                    writer.WriteLine("set_param([gcs, '/{0}'], '{1}', '{2}');", Name, param.Name, param.Value);
                }
                else
                {
                    writer.WriteLine("set_param([gcs, '/{0}'], '{1}', '${{{2}}}');", Name, param.Name, param.TestBenchParameterName);
                }
            }
        }

        public void GenerateSimulinkConnectionCode(TextWriter writer)
        {
            foreach (var port in OutgoingPorts)
            {
                foreach (var inputPortName in port.ConnectedInputPorts)
                {
                    writer.WriteLine("add_line(gcs, '{0}/{1}', '{2}');", Name, port.Name, inputPortName);
                }
            }
        }
    }

    public class SimulinkPort
    {
        public string Name { get; private set; }

        public List<string> ConnectedInputPorts { get; private set; }

        public SimulinkPort(string name)
        {
            Name = name;
            ConnectedInputPorts = new List<string>();
        }

        public static SimulinkPort FromDomainPort(GenericDomainModelPort port)
        {
            if (port.Attributes.Type != "out")
            {
                return null;
            }
            else
            {
                var result = new SimulinkPort(port.Name);
                result.AddConnectedInputPorts(port, new HashSet<GenericDomainModelPort>());

                return result;
            }
        }

        private void AddConnectedInputPorts(GenericDomainModelPort port, ISet<GenericDomainModelPort> visited)
        {
            visited.Add(port);

            if (port.Attributes.Type == "in" && port.ParentContainer is GenericDomainModel)
            {
                string parentComponentName =
                    SimulinkBlock.GetParentComponentName((GenericDomainModel) port.ParentContainer);
                ConnectedInputPorts.Add(string.Format("{0}/{1}", parentComponentName, port.Name));
                SimulinkGenerator.GMEConsole.Info.WriteLine("Connection: {0}/{1}", parentComponentName, port.Name);
            }

            foreach (var connection in port.SrcConnections.PortCompositionCollection)
            {
                var adjacent = connection.SrcEnd;
                if (adjacent is GenericDomainModelPort && !visited.Contains(adjacent))
                {
                    AddConnectedInputPorts((GenericDomainModelPort) adjacent, visited);
                }
            }

            foreach (var connection in port.DstConnections.PortCompositionCollection)
            {
                var adjacent = connection.DstEnd;
                if (adjacent is GenericDomainModelPort && !visited.Contains(adjacent))
                {
                    AddConnectedInputPorts((GenericDomainModelPort)adjacent, visited);
                }
            }
        }
    }

    public class SimulinkParameter
    {
        public string Name { get; private set; }
        
        public string Value { get; private set; }

        public string TestBenchParameterName { get; private set; }

        public SimulinkParameter(string name, string value, string testBenchParameterName)
        {
            Name = name;
            Value = value;
            TestBenchParameterName = testBenchParameterName;
        }

        public static SimulinkParameter FromDomainParameter(GenericDomainModelParameter param)
        {
            var value = GetAdjacentParameterValue(param);
            var tbParamName = TryGetTestbenchParamName((FCO) param, new HashSet<FCO>());

            if (value != null)
            {
                return new SimulinkParameter(param.Name, value, tbParamName);
            }
            else
            {
                return null;
            }
        }

        private static string GetAdjacentParameterValue(GenericDomainModelParameter param)
        {
            var connections = param.SrcConnections.GenericParameterPortMapCollection.ToList();

            if (connections.Count() != 1)
            {
                return null;
            }
            else
            {
                var source = connections.First().SrcEnd;

                if (source is Parameter)
                {
                    return ((Parameter) source).Attributes.Value;
                }
                else if (source is Property)
                {
                    return ((Property) source).Attributes.Value;
                }
                else
                {
                    return null;
                }
            }
        }

        private static string TryGetTestbenchParamName(FCO fco, ISet<FCO> visited)
        {
            if (fco.ParentContainer.Kind == "TestBench") //Note: We're not guaranteed to be working with domain-specific objects here
            {
                SimulinkGenerator.GMEConsole.Info.WriteLine("Testbench parameter found: {0}", fco.Name);
                return fco.Name;
            }

            visited.Add(fco);

            foreach (var connection in fco.AllDstConnections)
            {
                var adjacent = (FCO) connection.GenericDstEnd; //Cast to abstract FCO class, rather than interface (hopefully this always works?)
                if (adjacent.Kind == "Parameter" && !visited.Contains(adjacent)) //Note: GenericDstEnd doesn't give domain-specific objects
                {                                                                // (these are instances of FCO)
                    var result = TryGetTestbenchParamName(adjacent, visited);
                    if (result != null)
                    {
                        return result;
                    }
                }
            }

            foreach (var connection in fco.AllSrcConnections)
            {
                var adjacent = (FCO)connection.GenericSrcEnd; //Cast to abstract FCO class, rather than interface (hopefully this always works?)
                if (adjacent.Kind == "Parameter" && !visited.Contains(adjacent))
                {
                    var result = TryGetTestbenchParamName(adjacent, visited);
                    if (result != null)
                    {
                        return result;
                    }
                }
            }

            return null;
        }
    }
}
