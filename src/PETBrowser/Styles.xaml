<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:PETBrowser">
    <!-- Style definitions for translucent data grid highlight color -->
    <!-- Solution for .NET 4.0 adapted from here:  http://stackoverflow.com/questions/7998112/datagrids-selected-row-color-when-inactive/8095932#8095932 -->
    <!-- This is simpler in .NET 4.5; override InactiveSelectionHighlightBrush there -->
    <Color x:Key="GridHighlightColor">#66000000</Color>
    <Color x:Key="InactiveGridHighlightColor">#11000000</Color>
    <SolidColorBrush x:Key="GridHighlightBrush" Color="{StaticResource GridHighlightColor}" />
    <SolidColorBrush x:Key="InactiveGridHighlightBrush" Color="{StaticResource InactiveGridHighlightColor}" />
    <Style x:Key="GridStyle" BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <!-- Highlight when grid is focused -->
            <Trigger  Property="IsSelected" Value="true">
                <Setter Property="Background" Value="{StaticResource GridHighlightBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                <Setter Property="BorderBrush" Value="{StaticResource GridHighlightBrush}" />
            </Trigger>
            <MultiDataTrigger>
                <!-- Highlight when grid is unfocused -->
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}, Path=IsKeyboardFocusWithin}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource InactiveGridHighlightBrush}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                    <Setter Property="BorderBrush" Value="{StaticResource InactiveGridHighlightBrush}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Job status colors -->
    <Color x:Key="ReadyColor">PeachPuff</Color>
    <Color x:Key="QueuedColor">LightYellow</Color>
    <Color x:Key="UploadDownloadColor">PaleTurquoise</Color>
    <Color x:Key="PostedColor">Khaki</Color>
    <Color x:Key="RunningColor">LightSkyBlue</Color>
    <Color x:Key="SuccessColor">LightGreen</Color>
    <Color x:Key="FailedColor">LightPink</Color>
    
    <SolidColorBrush x:Key="ReadyBrush" Color="{StaticResource ReadyColor}" />
    <SolidColorBrush x:Key="QueuedBrush" Color="{StaticResource QueuedColor}" />
    <SolidColorBrush x:Key="UploadDownloadBrush" Color="{StaticResource UploadDownloadColor}" />
    <SolidColorBrush x:Key="PostedBrush" Color="{StaticResource PostedColor}" />
    <SolidColorBrush x:Key="RunningBrush" Color="{StaticResource RunningColor}" />
    <SolidColorBrush x:Key="SuccessBrush" Color="{StaticResource SuccessColor}" />
    <SolidColorBrush x:Key="FailedBrush" Color="{StaticResource FailedColor}" />

    <Style x:Key="JobsGridProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="#44000000"/>
        <Setter Property="Background" Value="transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid Name="TemplateRoot" SnapsToDevicePixels="true">
                        <Rectangle Fill="{TemplateBinding Background}"/>
                        <Rectangle Name="PART_Track" Margin="0"/>
                        <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="0">
                            <Grid Name="Foreground">
                                <Rectangle Fill="{TemplateBinding Foreground}" Name="Indicator" />
                                <Grid x:Name="Animation" ClipToBounds="true" Visibility="Hidden">
                                    <Rectangle Fill="{TemplateBinding Foreground}" Name="HiderPre" Margin="0,0,50,0">
                                        <Rectangle.RenderTransform>
                                            <ScaleTransform x:Name="HiderPreTransform" ScaleX="0"/>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                    <Rectangle Fill="{TemplateBinding Foreground}" Name="HiderPost" RenderTransformOrigin="1, 0" Margin="50,0,0,0">
                                        <Rectangle.RenderTransform>
                                            <ScaleTransform x:Name="HiderPostTransform" ScaleX="1"  />
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                                <Grid Name="Overlay">
                                </Grid>
                            </Grid>
                        </Decorator>

                        <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter TargetName="Animation" Property="Visibility" Value="Visible" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation
                                        Storyboard.TargetName="HiderPreTransform"
                                        Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                        To="1"
                                        Duration="0:00:4" AutoReverse="True"/>
                                        <DoubleAnimation
                                        Storyboard.TargetName="HiderPostTransform"
                                        Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                        To="0"
                                        Duration="0:00:4" AutoReverse="True"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>


</ResourceDictionary>