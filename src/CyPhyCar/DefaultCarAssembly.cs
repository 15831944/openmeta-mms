// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CyPhyCar
{
    using System;
    
    
    #line 1 "C:\Users\snyako.ISIS\Desktop\META\src\CyPhyCar\DefaultCarAssembly.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class DefaultCarAssembly : DefaultCarAssemblyBase
    {
        public virtual string TransformText()
        {
            this.Write("\r\n$---------------------------------------------------------------------MDI_HEADE" +
                    "R\r\n[MDI_HEADER]\r\n FILE_TYPE     =  \'asy\'\r\n FILE_VERSION  =  1.0\r\n FILE_FORMAT   " +
                    "=  \'ASCII\'\r\n HEADER_SIZE   =  9\r\n(COMMENTS)\r\n{comment_string}\r\n\'Adams/Car full_v" +
                    "ehicle assembly\'\r\n$-------------------------------------------------------------" +
                    "---ASSEMBLY_HEADER\r\n[ASSEMBLY_HEADER]\r\n ASSEMBLY_CLASS  =  \'full_vehicle\'\r\n TIME" +
                    "STAMP       =  \'2009/09/25,18:31:18\'\r\n HEADER_SIZE     =  5\r\n$------------------" +
                    "------------------------------------------------------PLUGINS\r\n[PLUGINS]\r\n PLUGI" +
                    "N_LIST  =  \'acar\'\r\n HEADER_SIZE  =  4\r\n$----------------------------------------" +
                    "----------------------------------UNITS\r\n[UNITS]\r\n LENGTH  =  \'mm\'\r\n FORCE   =  " +
                    "\'newton\'\r\n ANGLE   =  \'deg\'\r\n MASS    =  \'kg\'\r\n TIME    =  \'sec\'\r\n$-------------" +
                    "---------------------------------------------------------SUBSYSTEM\r\n[SUBSYSTEM]\r" +
                    "\n$ Subsystem information:\r\n$       Major Role : suspension\r\n$       Minor Role :" +
                    " front\r\n$       Template   : _double_wishbone\r\n\r\n USAGE  =  \'mdids://acar_shared" +
                    "/subsystems.tbl/TR_Front_Suspension.sub\'\r\n$-------------------------------------" +
                    "---------------------------------SUBSYSTEM\r\n[SUBSYSTEM]\r\n$ Subsystem information" +
                    ":\r\n$       Major Role : suspension\r\n$       Minor Role : rear\r\n$       Template " +
                    "  : _double_wishbone\r\n\r\n USAGE  =  \'mdids://acar_shared/subsystems.tbl/TR_Rear_S" +
                    "uspension.sub\'\r\n$---------------------------------------------------------------" +
                    "-------SUBSYSTEM\r\n[SUBSYSTEM]\r\n$ Subsystem information:\r\n$       Major Role : st" +
                    "eering\r\n$       Minor Role : front\r\n$       Template   : _rack_pinion_steering\r\n" +
                    "\r\n USAGE  =  \'mdids://acar_shared/subsystems.tbl/TR_Steering.sub\'\r\n$------------" +
                    "----------------------------------------------------------SUBSYSTEM\r\n[SUBSYSTEM]" +
                    "\r\n$ Subsystem information:\r\n$       Major Role : wheel\r\n$       Minor Role : fro" +
                    "nt\r\n$       Template   : _handling_tire\r\n\r\n USAGE  =  \'mdids://acar_shared/subsy" +
                    "stems.tbl/TR_Front_Tires.sub\'\r\n$------------------------------------------------" +
                    "----------------------SUBSYSTEM\r\n[SUBSYSTEM]\r\n$ Subsystem information:\r\n$       " +
                    "Major Role : wheel\r\n$       Minor Role : rear\r\n$       Template   : _handling_ti" +
                    "re\r\n\r\n USAGE  =  \'mdids://acar_shared/subsystems.tbl/TR_Rear_Tires.sub\'\r\n$------" +
                    "----------------------------------------------------------------SUBSYSTEM\r\n[SUBS" +
                    "YSTEM]\r\n$ Subsystem information:\r\n$       Major Role : body\r\n$       Minor Role " +
                    ": any\r\n$       Template   : _rigid_chassis\r\n\r\n USAGE  =  \'mdids://acar_shared/su" +
                    "bsystems.tbl/TR_Body.sub\'\r\n$----------------------------------------------------" +
                    "------------------SUBSYSTEM\r\n[SUBSYSTEM]\r\n$ Subsystem information:\r\n$       Majo" +
                    "r Role : powertrain\r\n$       Minor Role : rear\r\n$       Template   : _powertrain" +
                    "\r\n\r\n USAGE  =  \'mdids://acar_shared/subsystems.tbl/TR_Powertrain.sub\'\r\n$--------" +
                    "--------------------------------------------------------------SUBSYSTEM\r\n[SUBSYS" +
                    "TEM]\r\n$ Subsystem information:\r\n$       Major Role : brake_system\r\n$       Minor" +
                    " Role : any\r\n$       Template   : _brake_system_4Wdisk\r\n\r\n USAGE  =  \'mdids://ac" +
                    "ar_shared/subsystems.tbl/TR_Brake_System.sub\'\r\n$--------------------------------" +
                    "----------------------------------------TESTRIG\r\n[TESTRIG]\r\n USAGE  =  \'__MDI_SD" +
                    "I_TESTRIG\'\r\n\r\n$-----------------------------------------------------------------" +
                    "-----HARDPOINT\r\n[HARDPOINT]\r\n{hardpoint_name                  symmetry         x" +
                    "_value    y_value    z_value}\r\n \'path_error_reference        \'  \'single    \'    " +
                    "    0.0         0.0         0.0\r\n \'upright_reference           \'  \'left/right\'  " +
                    "      0.0         0.0         0.0\r\n$--------------------------------------------" +
                    "--------------------------PARAMETER\r\n[PARAMETER]\r\n{parameter_name               " +
                    "   symmetry       type       value}\r\n \'initial_engine_rpm          \'  \'single   " +
                    " \'   \'real\'     2000.0\r\n \'throttle_lag_brake_demand   \'  \'single    \'   \'real\'  " +
                    "   0.1\r\n \'brake_ratio                 \'  \'single    \'   \'real\'     0.55\r\n \'front" +
                    "_brake_max_torque      \'  \'single    \'   \'real\'     1700000.0\r\n \'rack_ratio     " +
                    "             \'  \'single    \'   \'real\'     174.5\r\n \'rear_brake_max_torque       \'" +
                    "  \'single    \'   \'real\'     1000000.0\r\n \'smart_driver_preview_time   \'  \'single " +
                    "   \'   \'real\'     0.5\r\n \'steering_ratio              \'  \'single    \'   \'real\'   " +
                    "  27.6\r\n$----------------------------------------------------------------SOLVER_" +
                    "SETTINGS\r\n[SOLVER_SETTINGS]\r\n INTEGRATOR          =  \'gstiff\'\r\n FORMULATION     " +
                    "    =  \'I3\'\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class DefaultCarAssemblyBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
