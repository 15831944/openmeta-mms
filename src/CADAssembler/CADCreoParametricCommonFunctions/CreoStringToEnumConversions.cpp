
// WARNING - DO NOT EDIT THIS FILE
// This file was auto generated by src\CADAssembler\CodeGenerationTools\enums\CreateCADEnums.bat.
// To edit, modify src\CADAssembler\CodeGenerationTools\enums\CreateCADEnums_InputFile.txt and run CreateCADEnums.bat.

#include <CreoStringToEnumConversions.h>
#include <cc_CommonUtilities.h>
#include <CADCommonConstants.h>
#include <sstream>
#include <boost/algorithm/string.hpp>

namespace isis
{

	////////////////////////////////////////////////////////////////////////////////////////
	ProBoolean ProBoolean_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("TRUE") == 0 ) return PRO_B_TRUE;
		else if	(strUpper.compare("1") == 0 ) return PRO_B_TRUE;
		else if	(strUpper.compare("FALSE") == 0 ) return PRO_B_FALSE;
		else if	(strUpper.compare("0") == 0 ) return PRO_B_FALSE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"TRUE   1   FALSE   0";
		throw isis::application_exception(errorString);
	}

	std::string ProBoolean_string( ProBoolean in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_B_TRUE:
				return "TRUE";
				break;
			case PRO_B_FALSE:
				return "FALSE";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_B_TRUE   PRO_B_FALSE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	ProMdlType ProMdlType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("PRO_MDL_UNUSED,") == 0 ) return PRO_MDL_UNUSED;
		else if	(strUpper.compare("PRO_MDL_ASSEMBLY") == 0 ) return PRO_MDL_ASSEMBLY;
		else if	(strUpper.compare("ASSEMBLY") == 0 ) return PRO_MDL_ASSEMBLY;
		else if	(strUpper.compare("PRO_MDL_PART") == 0 ) return PRO_MDL_PART;
		else if	(strUpper.compare("PART") == 0 ) return PRO_MDL_PART;
		else if	(strUpper.compare("PRO_MDL_DRAWING") == 0 ) return PRO_MDL_DRAWING;
		else if	(strUpper.compare("PRO_MDL_3DSECTION") == 0 ) return PRO_MDL_3DSECTION;
		else if	(strUpper.compare("PRO_MDL_2DSECTION") == 0 ) return PRO_MDL_2DSECTION;
		else if	(strUpper.compare("PRO_MDL_LAYOUT") == 0 ) return PRO_MDL_LAYOUT;
		else if	(strUpper.compare("PRO_MDL_DWGFORM") == 0 ) return PRO_MDL_DWGFORM;
		else if	(strUpper.compare("PRO_MDL_MFG") == 0 ) return PRO_MDL_MFG;
		else if	(strUpper.compare("PRO_MDL_REPORT") == 0 ) return PRO_MDL_REPORT;
		else if	(strUpper.compare("PRO_MDL_MARKUP") == 0 ) return PRO_MDL_MARKUP;
		else if	(strUpper.compare("PRO_MDL_DIAGRAM") == 0 ) return PRO_MDL_DIAGRAM;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"PRO_MDL_UNUSED,   PRO_MDL_ASSEMBLY   Assembly   PRO_MDL_PART   Part   PRO_MDL_DRAWING   PRO_MDL_3DSECTION   PRO_MDL_2DSECTION   PRO_MDL_LAYOUT   PRO_MDL_DWGFORM   PRO_MDL_MFG   PRO_MDL_REPORT   PRO_MDL_MARKUP   PRO_MDL_DIAGRAM";
		throw isis::application_exception(errorString);
	}

	std::string ProMdlType_string( ProMdlType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_MDL_UNUSED:
				return "PRO_MDL_UNUSED,";
				break;
			case PRO_MDL_ASSEMBLY:
				return "PRO_MDL_ASSEMBLY";
				break;
			case PRO_MDL_PART:
				return "PRO_MDL_PART";
				break;
			case PRO_MDL_DRAWING:
				return "PRO_MDL_DRAWING";
				break;
			case PRO_MDL_3DSECTION:
				return "PRO_MDL_3DSECTION";
				break;
			case PRO_MDL_2DSECTION:
				return "PRO_MDL_2DSECTION";
				break;
			case PRO_MDL_LAYOUT:
				return "PRO_MDL_LAYOUT";
				break;
			case PRO_MDL_DWGFORM:
				return "PRO_MDL_DWGFORM";
				break;
			case PRO_MDL_MFG:
				return "PRO_MDL_MFG";
				break;
			case PRO_MDL_REPORT:
				return "PRO_MDL_REPORT";
				break;
			case PRO_MDL_MARKUP:
				return "PRO_MDL_MARKUP";
				break;
			case PRO_MDL_DIAGRAM:
				return "PRO_MDL_DIAGRAM";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_MDL_UNUSED   PRO_MDL_ASSEMBLY   PRO_MDL_PART   PRO_MDL_DRAWING   PRO_MDL_3DSECTION   PRO_MDL_2DSECTION   PRO_MDL_LAYOUT   PRO_MDL_DWGFORM   PRO_MDL_MFG   PRO_MDL_REPORT   PRO_MDL_MARKUP   PRO_MDL_DIAGRAM";
				throw isis::application_exception(errorString);
		}
	}

	ProMdlType ProMdlType_enum( e_CADMdlType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_MDL_UNUSED:
				return PRO_MDL_UNUSED;
				break;
			case CAD_MDL_ASSEMBLY:
				return PRO_MDL_ASSEMBLY;
				break;
			case CAD_MDL_PART:
				return PRO_MDL_PART;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_MDL_UNUSED   CAD_MDL_ASSEMBLY   CAD_MDL_PART";
				throw isis::application_exception(errorString);
		}
	}

	std::string ProMdlType_string( e_CADMdlType in_Enum )
										throw (isis::application_exception)
	{
		try
		{
			ProMdlType tempType;
			tempType = ProMdlType_enum( in_Enum );
			return ProMdlType_string( tempType );
		}
		catch ( isis::application_exception ex )
		{
			std::stringstream errorString;
			errorString << ex.tostring() << std::endl << "Function - " << __FUNCTION__ << 
					", failed to convert e_CADMdlType to ProMdlType_string";
			throw isis::application_exception(errorString);	
		}
	}

	e_CADMdlType CADMdlType_enum( ProMdlType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_MDL_UNUSED:
				return CAD_MDL_UNUSED;
				break;
			case PRO_MDL_ASSEMBLY:
				return CAD_MDL_ASSEMBLY;
				break;
			case PRO_MDL_PART:
				return CAD_MDL_PART;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_MDL_UNUSED   PRO_MDL_ASSEMBLY   PRO_MDL_PART";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	ProType FeatureGeometryType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("SURFACE") == 0 ) return PRO_SURFACE;
		else if	(strUpper.compare("PLANE") == 0 ) return PRO_DATUM_PLANE;
		else if	(strUpper.compare("AXIS") == 0 ) return PRO_AXIS;
		else if	(strUpper.compare("POINT") == 0 ) return PRO_POINT;
		else if	(strUpper.compare("CSYS") == 0 ) return PRO_CSYS;
		else if	(strUpper.compare("PART") == 0 ) return PRO_PART;
		else if	(strUpper.compare("ASSEMBLY") == 0 ) return PRO_ASSEMBLY;
		else if	(strUpper.compare("FEATURE") == 0 ) return PRO_FEATURE;
		else if	(strUpper.compare("EDGE") == 0 ) return PRO_EDGE;
		else if	(strUpper.compare("INVALID") == 0 ) return PRO_TYPE_INVALID;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"SURFACE   PLANE   AXIS   POINT   CSYS   PART   ASSEMBLY   FEATURE   EDGE   INVALID";
		throw isis::application_exception(errorString);
	}

	std::string FeatureGeometryType_string( ProType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_SURFACE:
				return "SURFACE";
				break;
			case PRO_DATUM_PLANE:
				return "PLANE";
				break;
			case PRO_AXIS:
				return "AXIS";
				break;
			case PRO_POINT:
				return "POINT";
				break;
			case PRO_CSYS:
				return "CSYS";
				break;
			case PRO_PART:
				return "PART";
				break;
			case PRO_ASSEMBLY:
				return "ASSEMBLY";
				break;
			case PRO_FEATURE:
				return "FEATURE";
				break;
			case PRO_EDGE:
				return "EDGE";
				break;
			case PRO_TYPE_INVALID:
				return "INVALID";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_SURFACE   PRO_DATUM_PLANE   PRO_AXIS   PRO_POINT   PRO_CSYS   PRO_PART   PRO_ASSEMBLY   PRO_FEATURE   PRO_EDGE   PRO_TYPE_INVALID";
				throw isis::application_exception(errorString);
		}
	}

	ProType FeatureGeometryType_enum( e_CADFeatureGeometryType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_SURFACE:
				return PRO_SURFACE;
				break;
			case CAD_DATUM_PLANE:
				return PRO_DATUM_PLANE;
				break;
			case CAD_AXIS:
				return PRO_AXIS;
				break;
			case CAD_POINT:
				return PRO_POINT;
				break;
			case CAD_CSYS:
				return PRO_CSYS;
				break;
			case CAD_PART:
				return PRO_PART;
				break;
			case CAD_ASSEMBLY:
				return PRO_ASSEMBLY;
				break;
			case CAD_FEATURE:
				return PRO_FEATURE;
				break;
			case CAD_EDGE:
				return PRO_EDGE;
				break;
			case CAD_FEATURE_GEOMETRY_TYPE_INVALID:
				return PRO_TYPE_INVALID;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_SURFACE   CAD_DATUM_PLANE   CAD_AXIS   CAD_POINT   CAD_CSYS   CAD_PART   CAD_ASSEMBLY   CAD_FEATURE   CAD_EDGE   CAD_FEATURE_GEOMETRY_TYPE_INVALID";
				throw isis::application_exception(errorString);
		}
	}

	std::string FeatureGeometryType_string( e_CADFeatureGeometryType in_Enum )
										throw (isis::application_exception)
	{
		try
		{
			ProType tempType;
			tempType = FeatureGeometryType_enum( in_Enum );
			return FeatureGeometryType_string( tempType );
		}
		catch ( isis::application_exception ex )
		{
			std::stringstream errorString;
			errorString << ex.tostring() << std::endl << "Function - " << __FUNCTION__ << 
					", failed to convert e_CADFeatureGeometryType to FeatureGeometryType_string";
			throw isis::application_exception(errorString);	
		}
	}

	e_CADFeatureGeometryType CADFeatureGeometryType_enum( ProType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_SURFACE:
				return CAD_SURFACE;
				break;
			case PRO_DATUM_PLANE:
				return CAD_DATUM_PLANE;
				break;
			case PRO_AXIS:
				return CAD_AXIS;
				break;
			case PRO_POINT:
				return CAD_POINT;
				break;
			case PRO_CSYS:
				return CAD_CSYS;
				break;
			case PRO_PART:
				return CAD_PART;
				break;
			case PRO_ASSEMBLY:
				return CAD_ASSEMBLY;
				break;
			case PRO_FEATURE:
				return CAD_FEATURE;
				break;
			case PRO_EDGE:
				return CAD_EDGE;
				break;
			case PRO_TYPE_INVALID:
				return CAD_FEATURE_GEOMETRY_TYPE_INVALID;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_SURFACE   PRO_DATUM_PLANE   PRO_AXIS   PRO_POINT   PRO_CSYS   PRO_PART   PRO_ASSEMBLY   PRO_FEATURE   PRO_EDGE   PRO_TYPE_INVALID";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	ProAsmcompConstrType ProAsmcompConstrType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("MATE") == 0 ) return PRO_ASM_MATE;
		else if	(strUpper.compare("MATE_OFF") == 0 ) return PRO_ASM_MATE_OFF;
		else if	(strUpper.compare("ALIGN") == 0 ) return PRO_ASM_ALIGN;
		else if	(strUpper.compare("ALIGN_OFF") == 0 ) return PRO_ASM_ALIGN_OFF;
		else if	(strUpper.compare("INSERT") == 0 ) return PRO_ASM_INSERT;
		else if	(strUpper.compare("ORIENT") == 0 ) return PRO_ASM_ORIENT;
		else if	(strUpper.compare("CSYS") == 0 ) return PRO_ASM_CSYS;
		else if	(strUpper.compare("TANGENT") == 0 ) return PRO_ASM_TANGENT;
		else if	(strUpper.compare("PNT_ON_SRF") == 0 ) return PRO_ASM_PNT_ON_SRF;
		else if	(strUpper.compare("EDGE_ON_SRF") == 0 ) return PRO_ASM_EDGE_ON_SRF;
		else if	(strUpper.compare("DEF_PLACEMENT") == 0 ) return PRO_ASM_DEF_PLACEMENT;
		else if	(strUpper.compare("SUBSTITUTE") == 0 ) return PRO_ASM_SUBSTITUTE;
		else if	(strUpper.compare("PNT_ON_LINE") == 0 ) return PRO_ASM_PNT_ON_LINE;
		else if	(strUpper.compare("FIX") == 0 ) return PRO_ASM_FIX;
		else if	(strUpper.compare("AUTO") == 0 ) return PRO_ASM_AUTO;
		else if	(strUpper.compare("ALIGN_ANG_OFF") == 0 ) return PRO_ASM_ALIGN_ANG_OFF;
		else if	(strUpper.compare("MATE_ANG_OFF") == 0 ) return PRO_ASM_MATE_ANG_OFF;
		else if	(strUpper.compare("CSYS_PNT") == 0 ) return PRO_ASM_CSYS_PNT;
		else if	(strUpper.compare("LINE_NORMAL") == 0 ) return PRO_ASM_LINE_NORMAL;
		else if	(strUpper.compare("LINE_COPLANAR") == 0 ) return PRO_ASM_LINE_COPLANAR;
		else if	(strUpper.compare("LINE_PARL") == 0 ) return PRO_ASM_LINE_PARL;
		else if	(strUpper.compare("LINE_DIST") == 0 ) return PRO_ASM_LINE_DIST;
		else if	(strUpper.compare("PNT_DIST") == 0 ) return PRO_ASM_PNT_DIST;
		else if	(strUpper.compare("INSERT_NORM") == 0 ) return PRO_ASM_INSERT_NORM;
		else if	(strUpper.compare("INSERT_PARL") == 0 ) return PRO_ASM_INSERT_PARL;
		else if	(strUpper.compare("PNT_ON_LINE_DIST") == 0 ) return PRO_ASM_PNT_ON_LINE_DIST;
		else if	(strUpper.compare("PNT_ON_SRF_DIST") == 0 ) return PRO_ASM_PNT_ON_SRF_DIST;
		else if	(strUpper.compare("EDGE_ON_SRF_DIST") == 0 ) return PRO_ASM_EDGE_ON_SRF_DIST;
		else if	(strUpper.compare("EDGE_ON_SRF_ANG") == 0 ) return PRO_ASM_EDGE_ON_SRF_ANG;
		else if	(strUpper.compare("EDGE_ON_SRF_NORMAL") == 0 ) return PRO_ASM_EDGE_ON_SRF_NORMAL;
		else if	(strUpper.compare("ALIGN_NODEP_ANGLE") == 0 ) return PRO_ASM_ALIGN_NODEP_ANGLE;
		else if	(strUpper.compare("MATE_NODEP_ANGLE") == 0 ) return PRO_ASM_MATE_NODEP_ANGLE;
		else if	(strUpper.compare("LINE_ANGLE") == 0 ) return PRO_ASM_LINE_ANGLE;
		else if	(strUpper.compare("EDGE_ON_SRF_PARL") == 0 ) return PRO_ASM_EDGE_ON_SRF_PARL;
		else if	(strUpper.compare("SRF_NORMAL") == 0 ) return PRO_ASM_SRF_NORMAL;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"MATE   MATE_OFF   ALIGN   ALIGN_OFF   INSERT   ORIENT   CSYS   TANGENT   PNT_ON_SRF   EDGE_ON_SRF   DEF_PLACEMENT   SUBSTITUTE   PNT_ON_LINE   FIX   AUTO   ALIGN_ANG_OFF   MATE_ANG_OFF   CSYS_PNT   LINE_NORMAL   LINE_COPLANAR   LINE_PARL   LINE_DIST   PNT_DIST   INSERT_NORM   INSERT_PARL   PNT_ON_LINE_DIST   PNT_ON_SRF_DIST   EDGE_ON_SRF_DIST   EDGE_ON_SRF_ANG   EDGE_ON_SRF_NORMAL   ALIGN_NODEP_ANGLE   MATE_NODEP_ANGLE   LINE_ANGLE   EDGE_ON_SRF_PARL   SRF_NORMAL";
		throw isis::application_exception(errorString);
	}

	std::string ProAsmcompConstrType_string( ProAsmcompConstrType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_ASM_MATE:
				return "MATE";
				break;
			case PRO_ASM_MATE_OFF:
				return "MATE_OFF";
				break;
			case PRO_ASM_ALIGN:
				return "ALIGN";
				break;
			case PRO_ASM_ALIGN_OFF:
				return "ALIGN_OFF";
				break;
			case PRO_ASM_INSERT:
				return "INSERT";
				break;
			case PRO_ASM_ORIENT:
				return "ORIENT";
				break;
			case PRO_ASM_CSYS:
				return "CSYS";
				break;
			case PRO_ASM_TANGENT:
				return "TANGENT";
				break;
			case PRO_ASM_PNT_ON_SRF:
				return "PNT_ON_SRF";
				break;
			case PRO_ASM_EDGE_ON_SRF:
				return "EDGE_ON_SRF";
				break;
			case PRO_ASM_DEF_PLACEMENT:
				return "DEF_PLACEMENT";
				break;
			case PRO_ASM_SUBSTITUTE:
				return "SUBSTITUTE";
				break;
			case PRO_ASM_PNT_ON_LINE:
				return "PNT_ON_LINE";
				break;
			case PRO_ASM_FIX:
				return "FIX";
				break;
			case PRO_ASM_AUTO:
				return "AUTO";
				break;
			case PRO_ASM_ALIGN_ANG_OFF:
				return "ALIGN_ANG_OFF";
				break;
			case PRO_ASM_MATE_ANG_OFF:
				return "MATE_ANG_OFF";
				break;
			case PRO_ASM_CSYS_PNT:
				return "CSYS_PNT";
				break;
			case PRO_ASM_LINE_NORMAL:
				return "LINE_NORMAL";
				break;
			case PRO_ASM_LINE_COPLANAR:
				return "LINE_COPLANAR";
				break;
			case PRO_ASM_LINE_PARL:
				return "LINE_PARL";
				break;
			case PRO_ASM_LINE_DIST:
				return "LINE_DIST";
				break;
			case PRO_ASM_PNT_DIST:
				return "PNT_DIST";
				break;
			case PRO_ASM_INSERT_NORM:
				return "INSERT_NORM";
				break;
			case PRO_ASM_INSERT_PARL:
				return "INSERT_PARL";
				break;
			case PRO_ASM_PNT_ON_LINE_DIST:
				return "PNT_ON_LINE_DIST";
				break;
			case PRO_ASM_PNT_ON_SRF_DIST:
				return "PNT_ON_SRF_DIST";
				break;
			case PRO_ASM_EDGE_ON_SRF_DIST:
				return "EDGE_ON_SRF_DIST";
				break;
			case PRO_ASM_EDGE_ON_SRF_ANG:
				return "EDGE_ON_SRF_ANG";
				break;
			case PRO_ASM_EDGE_ON_SRF_NORMAL:
				return "EDGE_ON_SRF_NORMAL";
				break;
			case PRO_ASM_ALIGN_NODEP_ANGLE:
				return "ALIGN_NODEP_ANGLE";
				break;
			case PRO_ASM_MATE_NODEP_ANGLE:
				return "MATE_NODEP_ANGLE";
				break;
			case PRO_ASM_LINE_ANGLE:
				return "LINE_ANGLE";
				break;
			case PRO_ASM_EDGE_ON_SRF_PARL:
				return "EDGE_ON_SRF_PARL";
				break;
			case PRO_ASM_SRF_NORMAL:
				return "SRF_NORMAL";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_ASM_MATE   PRO_ASM_MATE_OFF   PRO_ASM_ALIGN   PRO_ASM_ALIGN_OFF   PRO_ASM_INSERT   PRO_ASM_ORIENT   PRO_ASM_CSYS   PRO_ASM_TANGENT   PRO_ASM_PNT_ON_SRF   PRO_ASM_EDGE_ON_SRF   PRO_ASM_DEF_PLACEMENT   PRO_ASM_SUBSTITUTE   PRO_ASM_PNT_ON_LINE   PRO_ASM_FIX   PRO_ASM_AUTO   PRO_ASM_ALIGN_ANG_OFF   PRO_ASM_MATE_ANG_OFF   PRO_ASM_CSYS_PNT   PRO_ASM_LINE_NORMAL   PRO_ASM_LINE_COPLANAR   PRO_ASM_LINE_PARL   PRO_ASM_LINE_DIST   PRO_ASM_PNT_DIST   PRO_ASM_INSERT_NORM   PRO_ASM_INSERT_PARL   PRO_ASM_PNT_ON_LINE_DIST   PRO_ASM_PNT_ON_SRF_DIST   PRO_ASM_EDGE_ON_SRF_DIST   PRO_ASM_EDGE_ON_SRF_ANG   PRO_ASM_EDGE_ON_SRF_NORMAL   PRO_ASM_ALIGN_NODEP_ANGLE   PRO_ASM_MATE_NODEP_ANGLE   PRO_ASM_LINE_ANGLE   PRO_ASM_EDGE_ON_SRF_PARL   PRO_ASM_SRF_NORMAL";
				throw isis::application_exception(errorString);
		}
	}

	ProAsmcompConstrType ProAsmcompConstrType_enum( e_CADAssemblyConstraintType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_ASM_MATE:
				return PRO_ASM_MATE;
				break;
			case CAD_ASM_MATE_OFF:
				return PRO_ASM_MATE_OFF;
				break;
			case CAD_ASM_ALIGN:
				return PRO_ASM_ALIGN;
				break;
			case CAD_ASM_ALIGN_OFF:
				return PRO_ASM_ALIGN_OFF;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_ASM_MATE   CAD_ASM_MATE_OFF   CAD_ASM_ALIGN   CAD_ASM_ALIGN_OFF";
				throw isis::application_exception(errorString);
		}
	}

	std::string ProAsmcompConstrType_string( e_CADAssemblyConstraintType in_Enum )
										throw (isis::application_exception)
	{
		try
		{
			ProAsmcompConstrType tempType;
			tempType = ProAsmcompConstrType_enum( in_Enum );
			return ProAsmcompConstrType_string( tempType );
		}
		catch ( isis::application_exception ex )
		{
			std::stringstream errorString;
			errorString << ex.tostring() << std::endl << "Function - " << __FUNCTION__ << 
					", failed to convert e_CADAssemblyConstraintType to ProAsmcompConstrType_string";
			throw isis::application_exception(errorString);	
		}
	}

	e_CADAssemblyConstraintType CADAssemblyConstraintType_enum( ProAsmcompConstrType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_ASM_MATE:
				return CAD_ASM_MATE;
				break;
			case PRO_ASM_MATE_OFF:
				return CAD_ASM_MATE_OFF;
				break;
			case PRO_ASM_ALIGN:
				return CAD_ASM_ALIGN;
				break;
			case PRO_ASM_ALIGN_OFF:
				return CAD_ASM_ALIGN_OFF;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_ASM_MATE   PRO_ASM_MATE_OFF   PRO_ASM_ALIGN   PRO_ASM_ALIGN_OFF";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	ProDatumside ProDatumside_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("PRO_DATUM_SIDE_NONE") == 0 ) return PRO_DATUM_SIDE_NONE;
		else if	(strUpper.compare("NONE") == 0 ) return PRO_DATUM_SIDE_NONE;
		else if	(strUpper.compare("PRO_DATUM_SIDE_YELLOW") == 0 ) return PRO_DATUM_SIDE_YELLOW;
		else if	(strUpper.compare("SIDE_A") == 0 ) return PRO_DATUM_SIDE_YELLOW;
		else if	(strUpper.compare("PRO_DATUM_SIDE_RED") == 0 ) return PRO_DATUM_SIDE_RED;
		else if	(strUpper.compare("SIDE_B") == 0 ) return PRO_DATUM_SIDE_RED;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"PRO_DATUM_SIDE_NONE   None   PRO_DATUM_SIDE_YELLOW   Side_A   PRO_DATUM_SIDE_RED   Side_B";
		throw isis::application_exception(errorString);
	}

	std::string ProDatumside_string( ProDatumside in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_DATUM_SIDE_NONE:
				return "PRO_DATUM_SIDE_NONE";
				break;
			case PRO_DATUM_SIDE_YELLOW:
				return "PRO_DATUM_SIDE_YELLOW";
				break;
			case PRO_DATUM_SIDE_RED:
				return "PRO_DATUM_SIDE_RED";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_DATUM_SIDE_NONE   PRO_DATUM_SIDE_YELLOW   PRO_DATUM_SIDE_RED";
				throw isis::application_exception(errorString);
		}
	}

	ProDatumside ProDatumside_enum( e_CADDatumside in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_DATUM_SIDE_NONE:
				return PRO_DATUM_SIDE_NONE;
				break;
			case CAD_DATUM_SIDE_YELLOW:
				return PRO_DATUM_SIDE_YELLOW;
				break;
			case CAD_DATUM_SIDE_RED:
				return PRO_DATUM_SIDE_RED;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_DATUM_SIDE_NONE   CAD_DATUM_SIDE_YELLOW   CAD_DATUM_SIDE_RED";
				throw isis::application_exception(errorString);
		}
	}

	std::string ProDatumside_string( e_CADDatumside in_Enum )
										throw (isis::application_exception)
	{
		try
		{
			ProDatumside tempType;
			tempType = ProDatumside_enum( in_Enum );
			return ProDatumside_string( tempType );
		}
		catch ( isis::application_exception ex )
		{
			std::stringstream errorString;
			errorString << ex.tostring() << std::endl << "Function - " << __FUNCTION__ << 
					", failed to convert e_CADDatumside to ProDatumside_string";
			throw isis::application_exception(errorString);	
		}
	}

	e_CADDatumside CADDatumside_enum( ProDatumside in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_DATUM_SIDE_NONE:
				return CAD_DATUM_SIDE_NONE;
				break;
			case PRO_DATUM_SIDE_YELLOW:
				return CAD_DATUM_SIDE_YELLOW;
				break;
			case PRO_DATUM_SIDE_RED:
				return CAD_DATUM_SIDE_RED;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_DATUM_SIDE_NONE   PRO_DATUM_SIDE_YELLOW   PRO_DATUM_SIDE_RED";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	pro_fem_solver_type ProAnalysisSolverType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("NASTRAN") == 0 ) return PRO_FEM_FEAS_NASTRAN;
		else if	(strUpper.compare("ANSYS") == 0 ) return PRO_FEM_FEAS_ANSYS;
		else if	(strUpper.compare("ABAQUS") == 0 ) return PRO_FEM_FEAS_ABAQUS;
		else if	(strUpper.compare("ABAQUS_DECK_BASED") == 0 ) return PRO_FEM_FEAS_ABAQUS;
		else if	(strUpper.compare("ABAQUS_MODEL_BASED") == 0 ) return PRO_FEM_FEAS_ABAQUS;
		else if	(strUpper.compare("PATRAN_NASTRAN") == 0 ) return PRO_FEM_FEAS_PATRAN;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"NASTRAN   ANSYS   ABAQUS   ABAQUS_DECK_BASED   ABAQUS_MODEL_BASED   PATRAN_NASTRAN";
		throw isis::application_exception(errorString);
	}

	std::string ProAnalysisSolverType_string( pro_fem_solver_type in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_FEM_FEAS_NASTRAN:
				return "NASTRAN";
				break;
			case PRO_FEM_FEAS_ANSYS:
				return "ANSYS";
				break;
			case PRO_FEM_FEAS_ABAQUS:
				return "ABAQUS";
				break;
			case PRO_FEM_FEAS_PATRAN:
				return "PATRAN_NASTRAN";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_FEM_FEAS_NASTRAN   PRO_FEM_FEAS_ANSYS   PRO_FEM_FEAS_ABAQUS   PRO_FEM_FEAS_PATRAN";
				throw isis::application_exception(errorString);
		}
	}

	pro_fem_solver_type ProAnalysisSolverType_enum( e_CADAnalysisSolverType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_FEM_FEAS_NASTRAN:
				return PRO_FEM_FEAS_NASTRAN;
				break;
			case CAD_FEM_FEAS_ANSYS:
				return PRO_FEM_FEAS_ANSYS;
				break;
			case CAD_FEM_FEAS_ABAQUS:
				return PRO_FEM_FEAS_ABAQUS;
				break;
			case CAD_FEM_FEAS_PATRAN:
				return PRO_FEM_FEAS_PATRAN;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_FEM_FEAS_NASTRAN   CAD_FEM_FEAS_ANSYS   CAD_FEM_FEAS_ABAQUS   CAD_FEM_FEAS_PATRAN";
				throw isis::application_exception(errorString);
		}
	}

	std::string ProAnalysisSolverType_string( e_CADAnalysisSolverType in_Enum )
										throw (isis::application_exception)
	{
		try
		{
			pro_fem_solver_type tempType;
			tempType = ProAnalysisSolverType_enum( in_Enum );
			return ProAnalysisSolverType_string( tempType );
		}
		catch ( isis::application_exception ex )
		{
			std::stringstream errorString;
			errorString << ex.tostring() << std::endl << "Function - " << __FUNCTION__ << 
					", failed to convert e_CADAnalysisSolverType to ProAnalysisSolverType_string";
			throw isis::application_exception(errorString);	
		}
	}

	e_CADAnalysisSolverType CADAnalysisSolverType_enum( pro_fem_solver_type in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_FEM_FEAS_NASTRAN:
				return CAD_FEM_FEAS_NASTRAN;
				break;
			case PRO_FEM_FEAS_ANSYS:
				return CAD_FEM_FEAS_ANSYS;
				break;
			case PRO_FEM_FEAS_ABAQUS:
				return CAD_FEM_FEAS_ABAQUS;
				break;
			case PRO_FEM_FEAS_PATRAN:
				return CAD_FEM_FEAS_PATRAN;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_FEM_FEAS_NASTRAN   PRO_FEM_FEAS_ANSYS   PRO_FEM_FEAS_ABAQUS   PRO_FEM_FEAS_PATRAN";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	pro_fem_mesh_type ProAnalysisMeshType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("SOLID") == 0 ) return PRO_FEM_SOLID_MESH;
		else if	(strUpper.compare("SURFACE") == 0 ) return PRO_FEM_SHELL_MESH;
		else if	(strUpper.compare("SHELL") == 0 ) return PRO_FEM_SHELL_MESH;
		else if	(strUpper.compare("MIXED") == 0 ) return PRO_FEM_MIXED_MESH;
		else if	(strUpper.compare("QUILT") == 0 ) return PRO_FEM_QUILT_MESH;
		else if	(strUpper.compare("BOUNDARY") == 0 ) return PRO_FEM_BOUNDARY_MESH;
		else if	(strUpper.compare("BAR") == 0 ) return PRO_FEM_BAR_MESH;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"SOLID   SURFACE   SHELL   MIXED   QUILT   BOUNDARY   BAR";
		throw isis::application_exception(errorString);
	}

	std::string ProAnalysisMeshType_string( pro_fem_mesh_type in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_FEM_SOLID_MESH:
				return "SOLID";
				break;
			case PRO_FEM_SHELL_MESH:
				return "SURFACE";
				break;
			case PRO_FEM_MIXED_MESH:
				return "MIXED";
				break;
			case PRO_FEM_QUILT_MESH:
				return "QUILT";
				break;
			case PRO_FEM_BOUNDARY_MESH:
				return "BOUNDARY";
				break;
			case PRO_FEM_BAR_MESH:
				return "BAR";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_FEM_SOLID_MESH   PRO_FEM_SHELL_MESH   PRO_FEM_MIXED_MESH   PRO_FEM_QUILT_MESH   PRO_FEM_BOUNDARY_MESH   PRO_FEM_BAR_MESH";
				throw isis::application_exception(errorString);
		}
	}

	pro_fem_mesh_type ProAnalysisMeshType_enum( e_CADAnalysisMeshType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_FEM_SOLID_MESH:
				return PRO_FEM_SOLID_MESH;
				break;
			case CAD_FEM_SHELL_MESH:
				return PRO_FEM_SHELL_MESH;
				break;
			case CAD_FEM_MIXED_MESH:
				return PRO_FEM_MIXED_MESH;
				break;
			case CAD_FEM_QUILT_MESH:
				return PRO_FEM_QUILT_MESH;
				break;
			case CAD_FEM_BOUNDARY_MESH:
				return PRO_FEM_BOUNDARY_MESH;
				break;
			case CAD_FEM_BAR_MESH:
				return PRO_FEM_BAR_MESH;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_FEM_SOLID_MESH   CAD_FEM_SHELL_MESH   CAD_FEM_MIXED_MESH   CAD_FEM_QUILT_MESH   CAD_FEM_BOUNDARY_MESH   CAD_FEM_BAR_MESH";
				throw isis::application_exception(errorString);
		}
	}

	std::string ProAnalysisMeshType_string( e_CADAnalysisMeshType in_Enum )
										throw (isis::application_exception)
	{
		try
		{
			pro_fem_mesh_type tempType;
			tempType = ProAnalysisMeshType_enum( in_Enum );
			return ProAnalysisMeshType_string( tempType );
		}
		catch ( isis::application_exception ex )
		{
			std::stringstream errorString;
			errorString << ex.tostring() << std::endl << "Function - " << __FUNCTION__ << 
					", failed to convert e_CADAnalysisMeshType to ProAnalysisMeshType_string";
			throw isis::application_exception(errorString);	
		}
	}

	e_CADAnalysisMeshType CADAnalysisMeshType_enum( pro_fem_mesh_type in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_FEM_SOLID_MESH:
				return CAD_FEM_SOLID_MESH;
				break;
			case PRO_FEM_SHELL_MESH:
				return CAD_FEM_SHELL_MESH;
				break;
			case PRO_FEM_MIXED_MESH:
				return CAD_FEM_MIXED_MESH;
				break;
			case PRO_FEM_QUILT_MESH:
				return CAD_FEM_QUILT_MESH;
				break;
			case PRO_FEM_BOUNDARY_MESH:
				return CAD_FEM_BOUNDARY_MESH;
				break;
			case PRO_FEM_BAR_MESH:
				return CAD_FEM_BAR_MESH;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_FEM_SOLID_MESH   PRO_FEM_SHELL_MESH   PRO_FEM_MIXED_MESH   PRO_FEM_QUILT_MESH   PRO_FEM_BOUNDARY_MESH   PRO_FEM_BAR_MESH";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	pro_fem_shell_mesh_type ProAnalysisShellElementType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("TRIANGLE") == 0 ) return PRO_FEM_SHELL_MESH_TRIANGLE;
		else if	(strUpper.compare("TETRA4") == 0 ) return PRO_FEM_SHELL_MESH_TRIANGLE;
		else if	(strUpper.compare("TETRA10") == 0 ) return PRO_FEM_SHELL_MESH_TRIANGLE;
		else if	(strUpper.compare("QUADRANGLE") == 0 ) return PRO_FEM_SHELL_MESH_QUADRANGLE;
		else if	(strUpper.compare("PLATE4") == 0 ) return PRO_FEM_SHELL_MESH_QUADRANGLE;
		else if	(strUpper.compare("PLATE8") == 0 ) return PRO_FEM_SHELL_MESH_QUADRANGLE;
		else if	(strUpper.compare("N/A") == 0 ) return PRO_FEM_SHELL_MESH_QUADRANGLE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"TRIANGLE   TETRA4   TETRA10   QUADRANGLE   PLATE4   PLATE8   N/A";
		throw isis::application_exception(errorString);
	}

	std::string ProAnalysisShellElementType_string( pro_fem_shell_mesh_type in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_FEM_SHELL_MESH_TRIANGLE:
				return "TRIANGLE";
				break;
			case PRO_FEM_SHELL_MESH_QUADRANGLE:
				return "QUADRANGLE";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_FEM_SHELL_MESH_TRIANGLE   PRO_FEM_SHELL_MESH_QUADRANGLE";
				throw isis::application_exception(errorString);
		}
	}

	pro_fem_shell_mesh_type ProAnalysisShellElementType_enum( e_CADAnalysisShellElementType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_FEM_SHELL_MESH_TRIANGLE:
				return PRO_FEM_SHELL_MESH_TRIANGLE;
				break;
			case CAD_FEM_SHELL_MESH_QUADRANGLE:
				return PRO_FEM_SHELL_MESH_QUADRANGLE;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_FEM_SHELL_MESH_TRIANGLE   CAD_FEM_SHELL_MESH_QUADRANGLE";
				throw isis::application_exception(errorString);
		}
	}

	std::string ProAnalysisShellElementType_string( e_CADAnalysisShellElementType in_Enum )
										throw (isis::application_exception)
	{
		try
		{
			pro_fem_shell_mesh_type tempType;
			tempType = ProAnalysisShellElementType_enum( in_Enum );
			return ProAnalysisShellElementType_string( tempType );
		}
		catch ( isis::application_exception ex )
		{
			std::stringstream errorString;
			errorString << ex.tostring() << std::endl << "Function - " << __FUNCTION__ << 
					", failed to convert e_CADAnalysisShellElementType to ProAnalysisShellElementType_string";
			throw isis::application_exception(errorString);	
		}
	}

	e_CADAnalysisShellElementType CADAnalysisShellElementType_enum( pro_fem_shell_mesh_type in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_FEM_SHELL_MESH_TRIANGLE:
				return CAD_FEM_SHELL_MESH_TRIANGLE;
				break;
			case PRO_FEM_SHELL_MESH_QUADRANGLE:
				return CAD_FEM_SHELL_MESH_QUADRANGLE;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_FEM_SHELL_MESH_TRIANGLE   PRO_FEM_SHELL_MESH_QUADRANGLE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	pro_fem_elem_shape_type ProAnalysisElementShapeType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("MIDPOINT_LINEAR") == 0 ) return PRO_FEM_MIDPNT_LINEAR;
		else if	(strUpper.compare("MIDPOINT_PARABOLIC") == 0 ) return PRO_FEM_MIDPNT_PARABOLIC;
		else if	(strUpper.compare("MIDPOINT_PARABOLIC_FIXED") == 0 ) return PRO_FEM_MIDPNT_PARABOLIC_FIXED;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"MIDPOINT_LINEAR   MIDPOINT_PARABOLIC   MIDPOINT_PARABOLIC_FIXED";
		throw isis::application_exception(errorString);
	}

	std::string ProAnalysisElementShapeType_string( pro_fem_elem_shape_type in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_FEM_MIDPNT_LINEAR:
				return "MIDPOINT_LINEAR";
				break;
			case PRO_FEM_MIDPNT_PARABOLIC:
				return "MIDPOINT_PARABOLIC";
				break;
			case PRO_FEM_MIDPNT_PARABOLIC_FIXED:
				return "MIDPOINT_PARABOLIC_FIXED";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_FEM_MIDPNT_LINEAR   PRO_FEM_MIDPNT_PARABOLIC   PRO_FEM_MIDPNT_PARABOLIC_FIXED";
				throw isis::application_exception(errorString);
		}
	}

	pro_fem_elem_shape_type ProAnalysisElementShapeType_enum( e_CADAnalysisElementShapeType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_FEM_MIDPNT_LINEAR:
				return PRO_FEM_MIDPNT_LINEAR;
				break;
			case CAD_FEM_MIDPNT_PARABOLIC:
				return PRO_FEM_MIDPNT_PARABOLIC;
				break;
			case CAD_FEM_MIDPNT_PARABOLIC_FIXED:
				return PRO_FEM_MIDPNT_PARABOLIC_FIXED;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_FEM_MIDPNT_LINEAR   CAD_FEM_MIDPNT_PARABOLIC   CAD_FEM_MIDPNT_PARABOLIC_FIXED";
				throw isis::application_exception(errorString);
		}
	}

	std::string ProAnalysisElementShapeType_string( e_CADAnalysisElementShapeType in_Enum )
										throw (isis::application_exception)
	{
		try
		{
			pro_fem_elem_shape_type tempType;
			tempType = ProAnalysisElementShapeType_enum( in_Enum );
			return ProAnalysisElementShapeType_string( tempType );
		}
		catch ( isis::application_exception ex )
		{
			std::stringstream errorString;
			errorString << ex.tostring() << std::endl << "Function - " << __FUNCTION__ << 
					", failed to convert e_CADAnalysisElementShapeType to ProAnalysisElementShapeType_string";
			throw isis::application_exception(errorString);	
		}
	}

	e_CADAnalysisElementShapeType CADAnalysisElementShapeType_enum( pro_fem_elem_shape_type in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_FEM_MIDPNT_LINEAR:
				return CAD_FEM_MIDPNT_LINEAR;
				break;
			case PRO_FEM_MIDPNT_PARABOLIC:
				return CAD_FEM_MIDPNT_PARABOLIC;
				break;
			case PRO_FEM_MIDPNT_PARABOLIC_FIXED:
				return CAD_FEM_MIDPNT_PARABOLIC_FIXED;
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_FEM_MIDPNT_LINEAR   PRO_FEM_MIDPNT_PARABOLIC   PRO_FEM_MIDPNT_PARABOLIC_FIXED";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	ProDtmplnConstrType CoordinatePlaneAlignment_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("XY") == 0 ) return PRO_DTMPLN_THRU_CSYS_XY;
		else if	(strUpper.compare("YZ") == 0 ) return PRO_DTMPLN_THRU_CSYS_YZ;
		else if	(strUpper.compare("ZX") == 0 ) return PRO_DTMPLN_THRU_CSYS_ZX;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"XY   YZ   ZX";
		throw isis::application_exception(errorString);
	}

	std::string CoordinatePlaneAlignment_string( ProDtmplnConstrType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_DTMPLN_THRU_CSYS_XY:
				return "XY";
				break;
			case PRO_DTMPLN_THRU_CSYS_YZ:
				return "YZ";
				break;
			case PRO_DTMPLN_THRU_CSYS_ZX:
				return "ZX";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_DTMPLN_THRU_CSYS_XY   PRO_DTMPLN_THRU_CSYS_YZ   PRO_DTMPLN_THRU_CSYS_ZX";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	ProType CoordinateAxisAlignment_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("X") == 0 ) return PRO_CSYS_AXIS_X;
		else if	(strUpper.compare("Y") == 0 ) return PRO_CSYS_AXIS_Y;
		else if	(strUpper.compare("Z") == 0 ) return PRO_CSYS_AXIS_Z;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"X   Y   Z";
		throw isis::application_exception(errorString);
	}

	std::string CoordinateAxisAlignment_string( ProType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_CSYS_AXIS_X:
				return "X";
				break;
			case PRO_CSYS_AXIS_Y:
				return "Y";
				break;
			case PRO_CSYS_AXIS_Z:
				return "Z";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_CSYS_AXIS_X   PRO_CSYS_AXIS_Y   PRO_CSYS_AXIS_Z";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	ProAsmcompSetType ProAsmcompSetType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("PRO_ASM_SET_TYPE_FIXED") == 0 ) return PRO_ASM_SET_TYPE_FIXED;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_PIN") == 0 ) return PRO_ASM_SET_TYPE_PIN;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_SLIDER") == 0 ) return PRO_ASM_SET_TYPE_SLIDER;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_CYLINDRICAL") == 0 ) return PRO_ASM_SET_TYPE_CYLINDRICAL;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_PLANAR") == 0 ) return PRO_ASM_SET_TYPE_PLANAR;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_BALL") == 0 ) return PRO_ASM_SET_TYPE_BALL;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_WELD") == 0 ) return PRO_ASM_SET_TYPE_WELD;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_BEARING") == 0 ) return PRO_ASM_SET_TYPE_BEARING;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_GENERAL") == 0 ) return PRO_ASM_SET_TYPE_GENERAL;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_6DOF") == 0 ) return PRO_ASM_SET_TYPE_6DOF;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_SLOT") == 0 ) return PRO_ASM_SET_TYPE_SLOT;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_GIMBAL") == 0 ) return PRO_ASM_SET_TYPE_GIMBAL;
		else if	(strUpper.compare("PRO_ASM_SET_TYPE_DMA_DEFINED") == 0 ) return PRO_ASM_SET_TYPE_DMA_DEFINED;
		else if	(strUpper.compare("PRO_ASM_SET_USER_DEFINED_TYPE") == 0 ) return PRO_ASM_SET_USER_DEFINED_TYPE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"PRO_ASM_SET_TYPE_FIXED   PRO_ASM_SET_TYPE_PIN   PRO_ASM_SET_TYPE_SLIDER   PRO_ASM_SET_TYPE_CYLINDRICAL   PRO_ASM_SET_TYPE_PLANAR   PRO_ASM_SET_TYPE_BALL   PRO_ASM_SET_TYPE_WELD   PRO_ASM_SET_TYPE_BEARING   PRO_ASM_SET_TYPE_GENERAL   PRO_ASM_SET_TYPE_6DOF   PRO_ASM_SET_TYPE_SLOT   PRO_ASM_SET_TYPE_GIMBAL   PRO_ASM_SET_TYPE_DMA_DEFINED   PRO_ASM_SET_USER_DEFINED_TYPE";
		throw isis::application_exception(errorString);
	}

	std::string ProAsmcompSetType_string( ProAsmcompSetType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PRO_ASM_SET_TYPE_FIXED:
				return "PRO_ASM_SET_TYPE_FIXED";
				break;
			case PRO_ASM_SET_TYPE_PIN:
				return "PRO_ASM_SET_TYPE_PIN";
				break;
			case PRO_ASM_SET_TYPE_SLIDER:
				return "PRO_ASM_SET_TYPE_SLIDER";
				break;
			case PRO_ASM_SET_TYPE_CYLINDRICAL:
				return "PRO_ASM_SET_TYPE_CYLINDRICAL";
				break;
			case PRO_ASM_SET_TYPE_PLANAR:
				return "PRO_ASM_SET_TYPE_PLANAR";
				break;
			case PRO_ASM_SET_TYPE_BALL:
				return "PRO_ASM_SET_TYPE_BALL";
				break;
			case PRO_ASM_SET_TYPE_WELD:
				return "PRO_ASM_SET_TYPE_WELD";
				break;
			case PRO_ASM_SET_TYPE_BEARING:
				return "PRO_ASM_SET_TYPE_BEARING";
				break;
			case PRO_ASM_SET_TYPE_GENERAL:
				return "PRO_ASM_SET_TYPE_GENERAL";
				break;
			case PRO_ASM_SET_TYPE_6DOF:
				return "PRO_ASM_SET_TYPE_6DOF";
				break;
			case PRO_ASM_SET_TYPE_SLOT:
				return "PRO_ASM_SET_TYPE_SLOT";
				break;
			case PRO_ASM_SET_TYPE_GIMBAL:
				return "PRO_ASM_SET_TYPE_GIMBAL";
				break;
			case PRO_ASM_SET_TYPE_DMA_DEFINED:
				return "PRO_ASM_SET_TYPE_DMA_DEFINED";
				break;
			case PRO_ASM_SET_USER_DEFINED_TYPE:
				return "PRO_ASM_SET_USER_DEFINED_TYPE";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PRO_ASM_SET_TYPE_FIXED   PRO_ASM_SET_TYPE_PIN   PRO_ASM_SET_TYPE_SLIDER   PRO_ASM_SET_TYPE_CYLINDRICAL   PRO_ASM_SET_TYPE_PLANAR   PRO_ASM_SET_TYPE_BALL   PRO_ASM_SET_TYPE_WELD   PRO_ASM_SET_TYPE_BEARING   PRO_ASM_SET_TYPE_GENERAL   PRO_ASM_SET_TYPE_6DOF   PRO_ASM_SET_TYPE_SLOT   PRO_ASM_SET_TYPE_GIMBAL   PRO_ASM_SET_TYPE_DMA_DEFINED   PRO_ASM_SET_USER_DEFINED_TYPE";
				throw isis::application_exception(errorString);
		}
	}

} // End Namespace