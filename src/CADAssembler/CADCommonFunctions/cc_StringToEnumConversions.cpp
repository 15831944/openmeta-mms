
// WARNING - DO NOT EDIT THIS FILE
// This file was auto generated by src\CADAssembler\CodeGenerationTools\enums\CreateCADEnums.bat.
// To edit, modify src\CADAssembler\CodeGenerationTools\enums\CreateCADEnums_InputFile.txt and run CreateCADEnums.bat.

#include "cc_StringToEnumConversions.h"
#include <boost/algorithm/string/case_conv.hpp>
#include "cc_CommonConstants.h"

using namespace std;

namespace isis
{

	////////////////////////////////////////////////////////////////////////////////////////
	e_FeatureInterfaceType FeatureInterfaceType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("CAD_DATUM") == 0 ) return CAD_DATUM;
		else if	(strUpper.compare("CAD_MODEL_INTERFACE") == 0 ) return CAD_MODEL_INTERFACE;
		else if	(strUpper.compare("CAD_MODEL_USER_DATA") == 0 ) return CAD_MODEL_USER_DATA;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"CAD_DATUM   CAD_MODEL_INTERFACE   CAD_MODEL_USER_DATA";
		throw isis::application_exception(errorString);
	}

	std::string FeatureInterfaceType_string( e_FeatureInterfaceType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_DATUM:
				return "CAD_DATUM";
				break;
			case CAD_MODEL_INTERFACE:
				return "CAD_MODEL_INTERFACE";
				break;
			case CAD_MODEL_USER_DATA:
				return "CAD_MODEL_USER_DATA";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_DATUM   CAD_MODEL_INTERFACE   CAD_MODEL_USER_DATA";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADParameterType CADParameterType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("FLOAT") == 0 ) return CAD_FLOAT;
		else if	(strUpper.compare("INTEGER") == 0 ) return CAD_INTEGER;
		else if	(strUpper.compare("BOOLEAN") == 0 ) return CAD_BOOLEAN;
		else if	(strUpper.compare("STRING") == 0 ) return CAD_STRING;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"FLOAT   INTEGER   BOOLEAN   STRING";
		throw isis::application_exception(errorString);
	}

	std::string CADParameterType_string( e_CADParameterType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_FLOAT:
				return "FLOAT";
				break;
			case CAD_INTEGER:
				return "INTEGER";
				break;
			case CAD_BOOLEAN:
				return "BOOLEAN";
				break;
			case CAD_STRING:
				return "STRING";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_FLOAT   CAD_INTEGER   CAD_BOOLEAN   CAD_STRING";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADSpecialInstruction SpecialInstruction_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("") == 0 ) return CAD_SPECIAL_INSTRUCTION_NONE;
		else if	(strUpper.compare("SIZE_TO_FIT") == 0 ) return CAD_SPECIAL_INSTRUCTION_SIZE_TO_FIT;
		else if	(strUpper.compare("HAS_KINEMATIC_JOINT") == 0 ) return CAD_SPECIAL_INSTRUCTION_HAS_KINEMATIC_JOINT;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"null_string   SIZE_TO_FIT   HAS_KINEMATIC_JOINT";
		throw isis::application_exception(errorString);
	}

	std::string SpecialInstruction_string( e_CADSpecialInstruction in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_SPECIAL_INSTRUCTION_NONE:
				return "";
				break;
			case CAD_SPECIAL_INSTRUCTION_SIZE_TO_FIT:
				return "SIZE_TO_FIT";
				break;
			case CAD_SPECIAL_INSTRUCTION_HAS_KINEMATIC_JOINT:
				return "HAS_KINEMATIC_JOINT";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_SPECIAL_INSTRUCTION_NONE   CAD_SPECIAL_INSTRUCTION_SIZE_TO_FIT   CAD_SPECIAL_INSTRUCTION_HAS_KINEMATIC_JOINT";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADUnitsDistance CADUnitsDistance_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("MM") == 0 ) return CAD_UNITS_MM;
		else if	(strUpper.compare("MILLIMETER") == 0 ) return CAD_UNITS_MM;
		else if	(strUpper.compare("CM") == 0 ) return CAD_UNITS_CM;
		else if	(strUpper.compare("INCH") == 0 ) return CAD_UNITS_INCH;
		else if	(strUpper.compare("N/A") == 0 ) return CAD_UNITS_NA;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"MM   MILLIMETER   CM   INCH   N/A";
		throw isis::application_exception(errorString);
	}

	std::string CADUnitsDistance_string( e_CADUnitsDistance in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_UNITS_MM:
				return "MM";
				break;
			case CAD_UNITS_CM:
				return "CM";
				break;
			case CAD_UNITS_INCH:
				return "INCH";
				break;
			case CAD_UNITS_NA:
				return "N/A";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_UNITS_MM   CAD_UNITS_CM   CAD_UNITS_INCH   CAD_UNITS_NA";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADUnitsForce CADUnitsForce_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("LBF") == 0 ) return CAD_UNITS_LBF;
		else if	(strUpper.compare("N") == 0 ) return CAD_UNITS_N;
		else if	(strUpper.compare("NEWTON") == 0 ) return CAD_UNITS_N;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"LBF   N   NEWTON";
		throw isis::application_exception(errorString);
	}

	std::string CADUnitsForce_string( e_CADUnitsForce in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_UNITS_LBF:
				return "LBF";
				break;
			case CAD_UNITS_N:
				return "N";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_UNITS_LBF   CAD_UNITS_N";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADUnitsMoment CADUnitsMoment_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("FT-LBF") == 0 ) return CAD_UNITS_FT_LBF;
		else if	(strUpper.compare("IN-LBF") == 0 ) return CAD_UNITS_IN_LBF;
		else if	(strUpper.compare("N-M") == 0 ) return CAD_UNITS_N_M;
		else if	(strUpper.compare("NEWTON-M") == 0 ) return CAD_UNITS_N_M;
		else if	(strUpper.compare("N-MM") == 0 ) return CAD_UNITS_N_MM;
		else if	(strUpper.compare("NEWTON-MM") == 0 ) return CAD_UNITS_N_MM;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"FT-LBF   IN-LBF   N-M   NEWTON-M   N-MM   NEWTON-MM";
		throw isis::application_exception(errorString);
	}

	std::string CADUnitsMoment_string( e_CADUnitsMoment in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_UNITS_FT_LBF:
				return "FT-LBF";
				break;
			case CAD_UNITS_IN_LBF:
				return "IN-LBF";
				break;
			case CAD_UNITS_N_M:
				return "N-M";
				break;
			case CAD_UNITS_N_MM:
				return "N-MM";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_UNITS_FT_LBF   CAD_UNITS_IN_LBF   CAD_UNITS_N_M   CAD_UNITS_N_MM";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADUnitsPressure CADUnitsPressure_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("MPA") == 0 ) return CAD_UNITS_MPA;
		else if	(strUpper.compare("PSI") == 0 ) return CAD_UNITS_LBF_PER_INCH_SQ;
		else if	(strUpper.compare("PA") == 0 ) return CAD_UNITS_PA;
		else if	(strUpper.compare("PASCAL") == 0 ) return CAD_UNITS_PA;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"MPa   psi   Pa   PASCAL";
		throw isis::application_exception(errorString);
	}

	std::string CADUnitsPressure_string( e_CADUnitsPressure in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_UNITS_MPA:
				return "MPa";
				break;
			case CAD_UNITS_LBF_PER_INCH_SQ:
				return "psi";
				break;
			case CAD_UNITS_PA:
				return "Pa";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_UNITS_MPA   CAD_UNITS_LBF_PER_INCH_SQ   CAD_UNITS_PA";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADUnitsAcceleration CADUnitsAcceleration_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("FT/S^2") == 0 ) return CAD_UNITS_FT_PER_SEC_SQ;
		else if	(strUpper.compare("FT/S2") == 0 ) return CAD_UNITS_FT_PER_SEC_SQ;
		else if	(strUpper.compare("MM/S^2") == 0 ) return CAD_UNITS_MM_PER_SEC_SQ;
		else if	(strUpper.compare("MM/S2") == 0 ) return CAD_UNITS_MM_PER_SEC_SQ;
		else if	(strUpper.compare("M/S^2") == 0 ) return CAD_UNITS_M_PER_SEC_SQ;
		else if	(strUpper.compare("M/S2") == 0 ) return CAD_UNITS_M_PER_SEC_SQ;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"FT/S^2   FT/S2   MM/S^2   MM/S2   M/S^2   M/S2";
		throw isis::application_exception(errorString);
	}

	std::string CADUnitsAcceleration_string( e_CADUnitsAcceleration in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_UNITS_FT_PER_SEC_SQ:
				return "FT/S^2";
				break;
			case CAD_UNITS_MM_PER_SEC_SQ:
				return "MM/S^2";
				break;
			case CAD_UNITS_M_PER_SEC_SQ:
				return "M/S^2";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_UNITS_FT_PER_SEC_SQ   CAD_UNITS_MM_PER_SEC_SQ   CAD_UNITS_M_PER_SEC_SQ";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADUnitsDensity CADUnitsDensity_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("KG/MM3") == 0 ) return CAD_UNITS_KG_PER_MM_CUBED;
		else if	(strUpper.compare("KG/M3") == 0 ) return CAD_UNITS_KG_PER_M_CUBED;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"kg/mm3   kg/m3";
		throw isis::application_exception(errorString);
	}

	std::string CADUnitsDensity_string( e_CADUnitsDensity in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_UNITS_KG_PER_MM_CUBED:
				return "kg/mm3";
				break;
			case CAD_UNITS_KG_PER_M_CUBED:
				return "kg/m3";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_UNITS_KG_PER_MM_CUBED   CAD_UNITS_KG_PER_M_CUBED";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADUnitsHeatCapacity CADUnitsHeatCapacity_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("J/KGK") == 0 ) return CAD_UNITS_J_PER_KG_K;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"J/KgK";
		throw isis::application_exception(errorString);
	}

	std::string CADUnitsHeatCapacity_string( e_CADUnitsHeatCapacity in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_UNITS_J_PER_KG_K:
				return "J/KgK";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_UNITS_J_PER_KG_K";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADUnitsThermalConductivity CADUnitsThermalConductivity_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("W/MMK") == 0 ) return CAD_UNITS_W_PER_MM_K;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"W/mmK";
		throw isis::application_exception(errorString);
	}

	std::string CADUnitsThermalConductivity_string( e_CADUnitsThermalConductivity in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_UNITS_W_PER_MM_K:
				return "W/mmK";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_UNITS_W_PER_MM_K";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADUnitsAngle CADUnitsAngle_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("RADIAN") == 0 ) return CAD_UNITS_RADIAN;
		else if	(strUpper.compare("DEGREE") == 0 ) return CAD_UNITS_DEGREE;
		else if	(strUpper.compare("DEGREES") == 0 ) return CAD_UNITS_DEGREE;
		else if	(strUpper.compare("DEG") == 0 ) return CAD_UNITS_DEGREE;
		else if	(strUpper.compare("N/A") == 0 ) return CAD_UNITS_ANGLE_NA;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"Radian   Degree   Degrees   Deg   N/A";
		throw isis::application_exception(errorString);
	}

	std::string CADUnitsAngle_string( e_CADUnitsAngle in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_UNITS_RADIAN:
				return "Radian";
				break;
			case CAD_UNITS_DEGREE:
				return "Degree";
				break;
			case CAD_UNITS_ANGLE_NA:
				return "N/A";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_UNITS_RADIAN   CAD_UNITS_DEGREE   CAD_UNITS_ANGLE_NA";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_AnalysisType AnalysisType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("STRUCTURAL") == 0 ) return ANALYSIS_STRUCTURAL;
		else if	(strUpper.compare("BUCKLING") == 0 ) return ANALYSIS_BUCKLING;
		else if	(strUpper.compare("MODAL") == 0 ) return ANALYSIS_MODAL;
		else if	(strUpper.compare("THERMAL") == 0 ) return ANALYSIS_THERMAL;
		else if	(strUpper.compare("FATIGUE") == 0 ) return ANALYSIS_FATIGUE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"STRUCTURAL   BUCKLING   MODAL   THERMAL   FATIGUE";
		throw isis::application_exception(errorString);
	}

	std::string AnalysisType_string( e_AnalysisType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case ANALYSIS_STRUCTURAL:
				return "STRUCTURAL";
				break;
			case ANALYSIS_BUCKLING:
				return "BUCKLING";
				break;
			case ANALYSIS_MODAL:
				return "MODAL";
				break;
			case ANALYSIS_THERMAL:
				return "THERMAL";
				break;
			case ANALYSIS_FATIGUE:
				return "FATIGUE";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"ANALYSIS_STRUCTURAL   ANALYSIS_BUCKLING   ANALYSIS_MODAL   ANALYSIS_THERMAL   ANALYSIS_FATIGUE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_AnalysisPartInterfaceType AnalysisPartInterfaceType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("FREE") == 0 ) return ANALYSIS_PART_INTERFACE_FREE;
		else if	(strUpper.compare("CONTACTING") == 0 ) return ANALYSIS_PART_INTERFACE_CONTACTING;
		else if	(strUpper.compare("BONDED") == 0 ) return ANALYSIS_PART_INTERFACE_BONDED;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"FREE   CONTACTING   BONDED";
		throw isis::application_exception(errorString);
	}

	std::string AnalysisPartInterfaceType_string( e_AnalysisPartInterfaceType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case ANALYSIS_PART_INTERFACE_FREE:
				return "FREE";
				break;
			case ANALYSIS_PART_INTERFACE_CONTACTING:
				return "CONTACTING";
				break;
			case ANALYSIS_PART_INTERFACE_BONDED:
				return "BONDED";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"ANALYSIS_PART_INTERFACE_FREE   ANALYSIS_PART_INTERFACE_CONTACTING   ANALYSIS_PART_INTERFACE_BONDED";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_AnalysisSolutionType AnalysisSolutionType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("ANALYSIS_DECK_BASED") == 0 ) return ANALYSIS_DECK_BASED;
		else if	(strUpper.compare("NASTRAN") == 0 ) return ANALYSIS_DECK_BASED;
		else if	(strUpper.compare("CALCULIX") == 0 ) return ANALYSIS_DECK_BASED;
		else if	(strUpper.compare("") == 0 ) return ANALYSIS_DECK_BASED;
		else if	(strUpper.compare("ABAQUS_DECK_BASED") == 0 ) return ANALYSIS_DECK_BASED;
		else if	(strUpper.compare("ABAQUS DECK BASED") == 0 ) return ANALYSIS_DECK_BASED;
		else if	(strUpper.compare("ANALYSIS_MODEL_BASED") == 0 ) return ANALYSIS_MODEL_BASED;
		else if	(strUpper.compare("ABAQUS_MODEL_BASED") == 0 ) return ANALYSIS_MODEL_BASED;
		else if	(strUpper.compare("ABAQUS MODEL BASED") == 0 ) return ANALYSIS_MODEL_BASED;
		else if	(strUpper.compare("PATRAN_NASTRAN") == 0 ) return ANALYSIS_MODEL_BASED;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"ANALYSIS_DECK_BASED   NASTRAN   CALCULIX   null_string   ABAQUS_DECK_BASED   ABAQUS DECK BASED   ANALYSIS_MODEL_BASED   ABAQUS_MODEL_BASED   ABAQUS MODEL BASED   PATRAN_NASTRAN";
		throw isis::application_exception(errorString);
	}

	std::string AnalysisSolutionType_string( e_AnalysisSolutionType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case ANALYSIS_DECK_BASED:
				return "ANALYSIS_DECK_BASED";
				break;
			case ANALYSIS_MODEL_BASED:
				return "ANALYSIS_MODEL_BASED";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"ANALYSIS_DECK_BASED   ANALYSIS_MODEL_BASED";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_AnalysisConstraintFixedFree AnalysisConstraintFixedFree_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("SCALAR") == 0 ) return ANALYSIS_CONSTRAINT_SCALAR;
		else if	(strUpper.compare("FIXED") == 0 ) return ANALYSIS_CONSTRAINT_FIXED;
		else if	(strUpper.compare("FREE") == 0 ) return ANALYSIS_CONSTRAINT_FREE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"SCALAR   FIXED   FREE";
		throw isis::application_exception(errorString);
	}

	std::string AnalysisConstraintFixedFree_string( e_AnalysisConstraintFixedFree in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case ANALYSIS_CONSTRAINT_SCALAR:
				return "SCALAR";
				break;
			case ANALYSIS_CONSTRAINT_FIXED:
				return "FIXED";
				break;
			case ANALYSIS_CONSTRAINT_FREE:
				return "FREE";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"ANALYSIS_CONSTRAINT_SCALAR   ANALYSIS_CONSTRAINT_FIXED   ANALYSIS_CONSTRAINT_FREE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADGeometryType CADGeometryType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("POLYGON") == 0 ) return CAD_GEOMETRY_POLYGON;
		else if	(strUpper.compare("CIRCLE") == 0 ) return CAD_GEOMETRY_CIRCLE;
		else if	(strUpper.compare("CONCENTRIC_CIRCLES") == 0 ) return CAD_GEOMETRY_CONCENTRIC_CIRCLES;
		else if	(strUpper.compare("CYLINDER") == 0 ) return CAD_GEOMETRY_CYLINDER;
		else if	(strUpper.compare("SPHERE") == 0 ) return CAD_GEOMETRY_SPHERE;
		else if	(strUpper.compare("EXTRUSION") == 0 ) return CAD_GEOMETRY_EXTRUSION;
		else if	(strUpper.compare("FACE") == 0 ) return CAD_GEOMETRY_FACE;
		else if	(strUpper.compare("NONE") == 0 ) return CAD_GEOMETRY_NONE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"POLYGON   CIRCLE   CONCENTRIC_CIRCLES   CYLINDER   SPHERE   EXTRUSION   FACE   NONE";
		throw isis::application_exception(errorString);
	}

	std::string CADGeometryType_string( e_CADGeometryType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_GEOMETRY_POLYGON:
				return "POLYGON";
				break;
			case CAD_GEOMETRY_CIRCLE:
				return "CIRCLE";
				break;
			case CAD_GEOMETRY_CONCENTRIC_CIRCLES:
				return "CONCENTRIC_CIRCLES";
				break;
			case CAD_GEOMETRY_CYLINDER:
				return "CYLINDER";
				break;
			case CAD_GEOMETRY_SPHERE:
				return "SPHERE";
				break;
			case CAD_GEOMETRY_EXTRUSION:
				return "EXTRUSION";
				break;
			case CAD_GEOMETRY_FACE:
				return "FACE";
				break;
			case CAD_GEOMETRY_NONE:
				return "NONE";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_GEOMETRY_POLYGON   CAD_GEOMETRY_CIRCLE   CAD_GEOMETRY_CONCENTRIC_CIRCLES   CAD_GEOMETRY_CYLINDER   CAD_GEOMETRY_SPHERE   CAD_GEOMETRY_EXTRUSION   CAD_GEOMETRY_FACE   CAD_GEOMETRY_NONE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADAnalysisFeatureGeometryType CADAnalysisFeatureGeometryType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("POINT") == 0 ) return CAD_ANALYSIS_FEATURE_GEOMETRY_POINT;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"POINT";
		throw isis::application_exception(errorString);
	}

	std::string CADAnalysisFeatureGeometryType_string( e_CADAnalysisFeatureGeometryType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_ANALYSIS_FEATURE_GEOMETRY_POINT:
				return "POINT";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_ANALYSIS_FEATURE_GEOMETRY_POINT";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADPrimaryGeometryQualifier CADPrimaryGeometryQualifier_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("INTERIORONLY") == 0 ) return CAD_INTERIOR_ONLY;
		else if	(strUpper.compare("BOUNDARYONLY") == 0 ) return CAD_BOUNDARY_ONLY;
		else if	(strUpper.compare("INTERIORANDBOUNDARY") == 0 ) return CAD_INTERIOR_AND_BOUNDARY;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"InteriorOnly   BoundaryOnly   InteriorAndBoundary";
		throw isis::application_exception(errorString);
	}

	std::string CADPrimaryGeometryQualifier_string( e_CADPrimaryGeometryQualifier in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_INTERIOR_ONLY:
				return "InteriorOnly";
				break;
			case CAD_BOUNDARY_ONLY:
				return "BoundaryOnly";
				break;
			case CAD_INTERIOR_AND_BOUNDARY:
				return "InteriorAndBoundary";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_INTERIOR_ONLY   CAD_BOUNDARY_ONLY   CAD_INTERIOR_AND_BOUNDARY";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADSecondaryGeometryQualifier CADSecondaryGeometryQualifier_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("INCLUDEENDCAPS") == 0 ) return CAD_INCLUDE_END_CAPS;
		else if	(strUpper.compare("EXCLUDEENDCAPS") == 0 ) return CAD_EXCLUDE_END_CAPS;
		else if	(strUpper.compare("") == 0 ) return CAD_SECONDARY_GEOMETRY_QUALIFIER_NONE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"IncludeEndCaps   ExcludeEndCaps   null_string";
		throw isis::application_exception(errorString);
	}

	std::string CADSecondaryGeometryQualifier_string( e_CADSecondaryGeometryQualifier in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_INCLUDE_END_CAPS:
				return "IncludeEndCaps";
				break;
			case CAD_EXCLUDE_END_CAPS:
				return "ExcludeEndCaps";
				break;
			case CAD_SECONDARY_GEOMETRY_QUALIFIER_NONE:
				return "";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_INCLUDE_END_CAPS   CAD_EXCLUDE_END_CAPS   CAD_SECONDARY_GEOMETRY_QUALIFIER_NONE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_MaterialType MaterialType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("STEEL") == 0 ) return MATERIAL_STEEL;
		else if	(strUpper.compare("ALUMINUM") == 0 ) return MATERIAL_ALUMINUM;
		else if	(strUpper.compare("PLASTIC") == 0 ) return MATERIAL_PLASTIC;
		else if	(strUpper.compare("CERAMIC") == 0 ) return MATERIAL_CERAMIC;
		else if	(strUpper.compare("POLYMER") == 0 ) return MATERIAL_POLYMER;
		else if	(strUpper.compare("TITANIUM") == 0 ) return MATERIAL_TITANIUM;
		else if	(strUpper.compare("STAINLESS") == 0 ) return MATERIAL_STAINLESS;
		else if	(strUpper.compare("COMPOSITE_FIBER") == 0 ) return MATERIAL_COMPOSITE_FIBER;
		else if	(strUpper.compare("HARD_PLASTIC") == 0 ) return MATERIAL_HARD_PLASTIC;
		else if	(strUpper.compare("FUEL") == 0 ) return MATERIAL_FUEL;
		else if	(strUpper.compare("FLUID") == 0 ) return MATERIAL_FLUID;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"STEEL   ALUMINUM   PLASTIC   CERAMIC   POLYMER   TITANIUM   STAINLESS   COMPOSITE_FIBER   HARD_PLASTIC   FUEL   FLUID";
		throw isis::application_exception(errorString);
	}

	std::string MaterialType_string( e_MaterialType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case MATERIAL_STEEL:
				return "STEEL";
				break;
			case MATERIAL_ALUMINUM:
				return "ALUMINUM";
				break;
			case MATERIAL_PLASTIC:
				return "PLASTIC";
				break;
			case MATERIAL_CERAMIC:
				return "CERAMIC";
				break;
			case MATERIAL_POLYMER:
				return "POLYMER";
				break;
			case MATERIAL_TITANIUM:
				return "TITANIUM";
				break;
			case MATERIAL_STAINLESS:
				return "STAINLESS";
				break;
			case MATERIAL_COMPOSITE_FIBER:
				return "COMPOSITE_FIBER";
				break;
			case MATERIAL_HARD_PLASTIC:
				return "HARD_PLASTIC";
				break;
			case MATERIAL_FUEL:
				return "FUEL";
				break;
			case MATERIAL_FLUID:
				return "FLUID";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"MATERIAL_STEEL   MATERIAL_ALUMINUM   MATERIAL_PLASTIC   MATERIAL_CERAMIC   MATERIAL_POLYMER   MATERIAL_TITANIUM   MATERIAL_STAINLESS   MATERIAL_COMPOSITE_FIBER   MATERIAL_HARD_PLASTIC   MATERIAL_FUEL   MATERIAL_FLUID";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_DataExchangeFormat DataExchangeFormat_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("STEP") == 0 ) return DATA_EXCHANGE_FORMAT_STEP;
		else if	(strUpper.compare("STEREOLITHOGRAPHY") == 0 ) return DATA_EXCHANGE_FORMAT_STEREOLITHOGRAPHY;
		else if	(strUpper.compare("INVENTOR") == 0 ) return DATA_EXCHANGE_FORMAT_INVENTOR;
		else if	(strUpper.compare("PARASOLID") == 0 ) return DATA_EXCHANGE_FORMAT_PARASOLID;
		else if	(strUpper.compare("DXF") == 0 ) return DATA_EXCHANGE_DXF;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"STEP   STEREOLITHOGRAPHY   INVENTOR   PARASOLID   DXF";
		throw isis::application_exception(errorString);
	}

	std::string DataExchangeFormat_string( e_DataExchangeFormat in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case DATA_EXCHANGE_FORMAT_STEP:
				return "STEP";
				break;
			case DATA_EXCHANGE_FORMAT_STEREOLITHOGRAPHY:
				return "STEREOLITHOGRAPHY";
				break;
			case DATA_EXCHANGE_FORMAT_INVENTOR:
				return "INVENTOR";
				break;
			case DATA_EXCHANGE_FORMAT_PARASOLID:
				return "PARASOLID";
				break;
			case DATA_EXCHANGE_DXF:
				return "DXF";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"DATA_EXCHANGE_FORMAT_STEP   DATA_EXCHANGE_FORMAT_STEREOLITHOGRAPHY   DATA_EXCHANGE_FORMAT_INVENTOR   DATA_EXCHANGE_FORMAT_PARASOLID   DATA_EXCHANGE_DXF";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_DataExchangeVersion DataExchangeVersion_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("N/A") == 0 ) return DATA_EXCHANGE_VERSION_NOT_APPLICABLE;
		else if	(strUpper.compare("") == 0 ) return DATA_EXCHANGE_VERSION_NOT_APPLICABLE;
		else if	(strUpper.compare("AP203_SINGLE_FILE") == 0 ) return AP203_SINGLE_FILE;
		else if	(strUpper.compare("AP203_E2_SINGLE_FILE") == 0 ) return AP203_E2_SINGLE_FILE;
		else if	(strUpper.compare("AP203_E2_SEPARATE_PART_FILES") == 0 ) return AP203_E2_SEPARATE_PART_FILES;
		else if	(strUpper.compare("AP214_SINGLE_FILE") == 0 ) return AP214_SINGLE_FILE;
		else if	(strUpper.compare("AP214_SEPARATE_PART_FILES") == 0 ) return AP214_SEPARATE_PART_FILES;
		else if	(strUpper.compare("ASCII") == 0 ) return ASCII;
		else if	(strUpper.compare("BINARY") == 0 ) return BINARY;
		else if	(strUpper.compare("2013") == 0 ) return Y2013;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"N/A   null_string   AP203_SINGLE_FILE   AP203_E2_SINGLE_FILE   AP203_E2_SEPARATE_PART_FILES   AP214_SINGLE_FILE   AP214_SEPARATE_PART_FILES   ASCII   BINARY   2013";
		throw isis::application_exception(errorString);
	}

	std::string DataExchangeVersion_string( e_DataExchangeVersion in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case DATA_EXCHANGE_VERSION_NOT_APPLICABLE:
				return "N/A";
				break;
			case AP203_SINGLE_FILE:
				return "AP203_SINGLE_FILE";
				break;
			case AP203_E2_SINGLE_FILE:
				return "AP203_E2_SINGLE_FILE";
				break;
			case AP203_E2_SEPARATE_PART_FILES:
				return "AP203_E2_SEPARATE_PART_FILES";
				break;
			case AP214_SINGLE_FILE:
				return "AP214_SINGLE_FILE";
				break;
			case AP214_SEPARATE_PART_FILES:
				return "AP214_SEPARATE_PART_FILES";
				break;
			case ASCII:
				return "ASCII";
				break;
			case BINARY:
				return "BINARY";
				break;
			case Y2013:
				return "2013";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"DATA_EXCHANGE_VERSION_NOT_APPLICABLE   AP203_SINGLE_FILE   AP203_E2_SINGLE_FILE   AP203_E2_SEPARATE_PART_FILES   AP214_SINGLE_FILE   AP214_SEPARATE_PART_FILES   ASCII   BINARY   Y2013";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_DataExchangeSpecialInstruction DataExchangeSpecialInstruction_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("LEAFASSEMBLIESMETRICS") == 0 ) return DATA_EXCHANGE_LEAF_ASSEMBLIES_METRICS;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"LeafAssembliesMetrics";
		throw isis::application_exception(errorString);
	}

	std::string DataExchangeSpecialInstruction_string( e_DataExchangeSpecialInstruction in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case DATA_EXCHANGE_LEAF_ASSEMBLIES_METRICS:
				return "LeafAssembliesMetrics";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"DATA_EXCHANGE_LEAF_ASSEMBLIES_METRICS";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_ComputationType ComputationType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("BOUNDINGBOX") == 0 ) return COMPUTATION_BOUNDING_BOX;
		else if	(strUpper.compare("CG") == 0 ) return COMPUTATION_CG;
		else if	(strUpper.compare("CENTEROFGRAVITY") == 0 ) return COMPUTATION_CG;
		else if	(strUpper.compare("POINT") == 0 ) return COMPUTATION_POINT;
		else if	(strUpper.compare("POINTCOORDINATES") == 0 ) return COMPUTATION_POINT;
		else if	(strUpper.compare("MASS") == 0 ) return COMPUTATION_MASS;
		else if	(strUpper.compare("INTERFERENCECOUNT") == 0 ) return COMPUTATION_INTERFERENCE_COUNT;
		else if	(strUpper.compare("COEFFICIENTOFDRAG") == 0 ) return COMPUTATION_COEFFICIENT_OF_DRAG;
		else if	(strUpper.compare("PLANE") == 0 ) return COMPUTATION_PLANE;
		else if	(strUpper.compare("VONMISESSTRESS") == 0 ) return COMPUTATION_STRESS_MISES;
		else if	(strUpper.compare("SHEARSTRESS") == 0 ) return COMPUTATION_STRESS_SHEAR;
		else if	(strUpper.compare("BEARINGSTRESS") == 0 ) return COMPUTATION_STRESS_BEARING;
		else if	(strUpper.compare("FACTOROFSAFETY") == 0 ) return COMPUTATION_FACTOR_OF_SAFETY;
		else if	(strUpper.compare("TOTALSHOTS") == 0 ) return COMPUTATION_TOTAL_SHOTS;
		else if	(strUpper.compare("TOTALINTERSECTIONS") == 0 ) return COMPUTATION_TOTAL_INTERSECTIONS;
		else if	(strUpper.compare("TOTALPERFORATIONS") == 0 ) return COMPUTATION_TOTAL_PERFORATIONS;
		else if	(strUpper.compare("TOTALKILLS") == 0 ) return COMPUTATION_TOTAL_KILLS;
		else if	(strUpper.compare("MAXVERTICALJUMP") == 0 ) return MAX_VERTICAL_JUMP;
		else if	(strUpper.compare("MAXVERTICALVELOCITY") == 0 ) return MAX_VERTICAL_VELOCITY;
		else if	(strUpper.compare("MAXHORIZONALVELOCITY") == 0 ) return MAX_HORIZONAL_VELOCITY;
		else if	(strUpper.compare("MINIMUMTEMPERATURE") == 0 ) return MINIMUM_TEMPERATURE;
		else if	(strUpper.compare("MAXIMUMTEMPERATURE") == 0 ) return MAXIMUM_TEMPERATURE;
		else if	(strUpper.compare("TSAI_WU_FAILURE") == 0 ) return TSAI_WU_FAILURE;
		else if	(strUpper.compare("HILL_FAILURE") == 0 ) return HILL_FAILURE;
		else if	(strUpper.compare("HOFFMAN_FAILURE") == 0 ) return HOFFMAN_FAILURE;
		else if	(strUpper.compare("MAXIMUM_FAILURE") == 0 ) return MAXIMUM_FAILURE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"BoundingBox   CG   CenterOfGravity   Point   PointCoordinates   Mass   InterferenceCount   CoefficientOfDrag   Plane   VonMisesStress   ShearStress   BearingStress   FactorOfSafety   TotalShots   TotalIntersections   TotalPerforations   TotalKills   MaxVerticalJump   MaxVerticalVelocity   MaxHorizonalVelocity   MinimumTemperature   MaximumTemperature   Tsai_Wu_Failure   Hill_Failure   Hoffman_Failure   Maximum_Failure";
		throw isis::application_exception(errorString);
	}

	std::string ComputationType_string( e_ComputationType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case COMPUTATION_BOUNDING_BOX:
				return "BoundingBox";
				break;
			case COMPUTATION_CG:
				return "CG";
				break;
			case COMPUTATION_POINT:
				return "Point";
				break;
			case COMPUTATION_MASS:
				return "Mass";
				break;
			case COMPUTATION_INTERFERENCE_COUNT:
				return "InterferenceCount";
				break;
			case COMPUTATION_COEFFICIENT_OF_DRAG:
				return "CoefficientOfDrag";
				break;
			case COMPUTATION_PLANE:
				return "Plane";
				break;
			case COMPUTATION_STRESS_MISES:
				return "VonMisesStress";
				break;
			case COMPUTATION_STRESS_SHEAR:
				return "ShearStress";
				break;
			case COMPUTATION_STRESS_BEARING:
				return "BearingStress";
				break;
			case COMPUTATION_FACTOR_OF_SAFETY:
				return "FactorOfSafety";
				break;
			case COMPUTATION_TOTAL_SHOTS:
				return "TotalShots";
				break;
			case COMPUTATION_TOTAL_INTERSECTIONS:
				return "TotalIntersections";
				break;
			case COMPUTATION_TOTAL_PERFORATIONS:
				return "TotalPerforations";
				break;
			case COMPUTATION_TOTAL_KILLS:
				return "TotalKills";
				break;
			case MAX_VERTICAL_JUMP:
				return "MaxVerticalJump";
				break;
			case MAX_VERTICAL_VELOCITY:
				return "MaxVerticalVelocity";
				break;
			case MAX_HORIZONAL_VELOCITY:
				return "MaxHorizonalVelocity";
				break;
			case MINIMUM_TEMPERATURE:
				return "MinimumTemperature";
				break;
			case MAXIMUM_TEMPERATURE:
				return "MaximumTemperature";
				break;
			case TSAI_WU_FAILURE:
				return "Tsai_Wu_Failure";
				break;
			case HILL_FAILURE:
				return "Hill_Failure";
				break;
			case HOFFMAN_FAILURE:
				return "Hoffman_Failure";
				break;
			case MAXIMUM_FAILURE:
				return "Maximum_Failure";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"COMPUTATION_BOUNDING_BOX   COMPUTATION_CG   COMPUTATION_POINT   COMPUTATION_MASS   COMPUTATION_INTERFERENCE_COUNT   COMPUTATION_COEFFICIENT_OF_DRAG   COMPUTATION_PLANE   COMPUTATION_STRESS_MISES   COMPUTATION_STRESS_SHEAR   COMPUTATION_STRESS_BEARING   COMPUTATION_FACTOR_OF_SAFETY   COMPUTATION_TOTAL_SHOTS   COMPUTATION_TOTAL_INTERSECTIONS   COMPUTATION_TOTAL_PERFORATIONS   COMPUTATION_TOTAL_KILLS   MAX_VERTICAL_JUMP   MAX_VERTICAL_VELOCITY   MAX_HORIZONAL_VELOCITY   MINIMUM_TEMPERATURE   MAXIMUM_TEMPERATURE   TSAI_WU_FAILURE   HILL_FAILURE   HOFFMAN_FAILURE   MAXIMUM_FAILURE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_ComputationSubType ComputationSubType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("GROUND") == 0 ) return COMPUTATION_SUBTYPE_GROUND;
		else if	(strUpper.compare("NONE") == 0 ) return COMPUTATION_SUBTYPE_NONE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"GROUND   NONE";
		throw isis::application_exception(errorString);
	}

	std::string ComputationSubType_string( e_ComputationSubType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case COMPUTATION_SUBTYPE_GROUND:
				return "GROUND";
				break;
			case COMPUTATION_SUBTYPE_NONE:
				return "NONE";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"COMPUTATION_SUBTYPE_GROUND   COMPUTATION_SUBTYPE_NONE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_ComputationDimension ComputationDimension_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("X_COORDINATE") == 0 ) return COMPUTATION_X_COORDINATE;
		else if	(strUpper.compare("Y_COORDINATE") == 0 ) return COMPUTATION_Y_COORDINATE;
		else if	(strUpper.compare("Z_COORDINATE") == 0 ) return COMPUTATION_Z_COORDINATE;
		else if	(strUpper.compare("VECTOR") == 0 ) return COMPUTATION_VECTOR;
		else if	(strUpper.compare("SCALAR") == 0 ) return COMPUTATION_SCALAR;
		else if	(strUpper.compare("BOOLEAN") == 0 ) return COMPUTATION_BOOLEAN;
		else if	(strUpper.compare("POINTS") == 0 ) return COMPUTATION_POINTS;
		else if	(strUpper.compare("") == 0 ) return COMPUTATION_DIMENSION_NONE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"X_COORDINATE   Y_COORDINATE   Z_COORDINATE   VECTOR   SCALAR   BOOLEAN   POINTS   null_string";
		throw isis::application_exception(errorString);
	}

	std::string ComputationDimension_string( e_ComputationDimension in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case COMPUTATION_X_COORDINATE:
				return "X_COORDINATE";
				break;
			case COMPUTATION_Y_COORDINATE:
				return "Y_COORDINATE";
				break;
			case COMPUTATION_Z_COORDINATE:
				return "Z_COORDINATE";
				break;
			case COMPUTATION_VECTOR:
				return "VECTOR";
				break;
			case COMPUTATION_SCALAR:
				return "SCALAR";
				break;
			case COMPUTATION_BOOLEAN:
				return "BOOLEAN";
				break;
			case COMPUTATION_POINTS:
				return "POINTS";
				break;
			case COMPUTATION_DIMENSION_NONE:
				return "";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"COMPUTATION_X_COORDINATE   COMPUTATION_Y_COORDINATE   COMPUTATION_Z_COORDINATE   COMPUTATION_VECTOR   COMPUTATION_SCALAR   COMPUTATION_BOOLEAN   COMPUTATION_POINTS   COMPUTATION_DIMENSION_NONE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_GeometrySetOperation GeometrySetOperation_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("+") == 0 ) return CAD_GEOMETRY_SET_PLUS;
		else if	(strUpper.compare("-") == 0 ) return CAD_GEOMETRY_SET_MINUS;
		else if	(strUpper.compare("INTERSECTION") == 0 ) return CAD_GEOMETRY_SET_INTERSECTION;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"+   -   INTERSECTION";
		throw isis::application_exception(errorString);
	}

	std::string GeometrySetOperation_string( e_GeometrySetOperation in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_GEOMETRY_SET_PLUS:
				return "+";
				break;
			case CAD_GEOMETRY_SET_MINUS:
				return "-";
				break;
			case CAD_GEOMETRY_SET_INTERSECTION:
				return "INTERSECTION";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_GEOMETRY_SET_PLUS   CAD_GEOMETRY_SET_MINUS   CAD_GEOMETRY_SET_INTERSECTION";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADFileType CADFileType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("CREO") == 0 ) return CAD_CREO;
		else if	(strUpper.compare("STEP") == 0 ) return CAD_STEP;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"CREO   STEP";
		throw isis::application_exception(errorString);
	}

	std::string CADFileType_string( e_CADFileType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_CREO:
				return "CREO";
				break;
			case CAD_STEP:
				return "STEP";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_CREO   CAD_STEP";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADMetricsError CADMetricsError_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("MASS_PROPERTIES_NOT_DEFINED") == 0 ) return CAD_MASS_PROPERTIES_NOT_DEFINED;
		else if	(strUpper.compare("INTERIA_AT_DEFAULT_CSYS_NOT_DEFINED") == 0 ) return CAD_INTERIA_AT_DEFAULT_CSYS_NOT_DEFINED;
		else if	(strUpper.compare("INTERIA_AT_CENTER_OF_GRAVITY_NOT_DEFINED") == 0 ) return CAD_INTERIA_AT_CENTER_OF_GRAVITY_NOT_DEFINED;
		else if	(strUpper.compare("SURFACE_AREA_NOT_DEFINED") == 0 ) return CAD_SURFACE_AREA_NOT_DEFINED;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"MASS_PROPERTIES_NOT_DEFINED   INTERIA_AT_DEFAULT_CSYS_NOT_DEFINED   INTERIA_AT_CENTER_OF_GRAVITY_NOT_DEFINED   SURFACE_AREA_NOT_DEFINED";
		throw isis::application_exception(errorString);
	}

	std::string CADMetricsError_string( e_CADMetricsError in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_MASS_PROPERTIES_NOT_DEFINED:
				return "MASS_PROPERTIES_NOT_DEFINED";
				break;
			case CAD_INTERIA_AT_DEFAULT_CSYS_NOT_DEFINED:
				return "INTERIA_AT_DEFAULT_CSYS_NOT_DEFINED";
				break;
			case CAD_INTERIA_AT_CENTER_OF_GRAVITY_NOT_DEFINED:
				return "INTERIA_AT_CENTER_OF_GRAVITY_NOT_DEFINED";
				break;
			case CAD_SURFACE_AREA_NOT_DEFINED:
				return "SURFACE_AREA_NOT_DEFINED";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_MASS_PROPERTIES_NOT_DEFINED   CAD_INTERIA_AT_DEFAULT_CSYS_NOT_DEFINED   CAD_INTERIA_AT_CENTER_OF_GRAVITY_NOT_DEFINED   CAD_SURFACE_AREA_NOT_DEFINED";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADInertiaAt CADInertiaAt_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("DEFAULT_CSYS") == 0 ) return CAD_DEFAULT_CSYS;
		else if	(strUpper.compare("CENTER_OF_GRAVITY") == 0 ) return CAD_CENTER_OF_GRAVITY;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"DEFAULT_CSYS   CENTER_OF_GRAVITY";
		throw isis::application_exception(errorString);
	}

	std::string CADInertiaAt_string( e_CADInertiaAt in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_DEFAULT_CSYS:
				return "DEFAULT_CSYS";
				break;
			case CAD_CENTER_OF_GRAVITY:
				return "CENTER_OF_GRAVITY";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_DEFAULT_CSYS   CAD_CENTER_OF_GRAVITY";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_ReferencePlane ReferencePlane_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("NONE") == 0 ) return PLANE_NONE;
		else if	(strUpper.compare("GROUND") == 0 ) return PLANE_GROUND;
		else if	(strUpper.compare("WATERLINE") == 0 ) return PLANE_WATERLINE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"NONE   GROUND   WATERLINE";
		throw isis::application_exception(errorString);
	}

	std::string ReferencePlane_string( e_ReferencePlane in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PLANE_NONE:
				return "NONE";
				break;
			case PLANE_GROUND:
				return "GROUND";
				break;
			case PLANE_WATERLINE:
				return "WATERLINE";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PLANE_NONE   PLANE_GROUND   PLANE_WATERLINE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_ComponentDefinitionSource ComponentDefinitionSource_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("CYPHY") == 0 ) return COMPONENT_DEFINITION_SOURCE_CYPHY;
		else if	(strUpper.compare("CAD_MODEL") == 0 ) return COMPONENT_DEFINITION_SOURCE_CAD_MODEL;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"CYPHY   CAD_MODEL";
		throw isis::application_exception(errorString);
	}

	std::string ComponentDefinitionSource_string( e_ComponentDefinitionSource in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case COMPONENT_DEFINITION_SOURCE_CYPHY:
				return "CYPHY";
				break;
			case COMPONENT_DEFINITION_SOURCE_CAD_MODEL:
				return "CAD_MODEL";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"COMPONENT_DEFINITION_SOURCE_CYPHY   COMPONENT_DEFINITION_SOURCE_CAD_MODEL";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADModelRepresentation CADModelRepresentation_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("FEATURED_REP") == 0 ) return CAD_MODEL_FEATURED_REP;
		else if	(strUpper.compare("DEFEATURED_REP") == 0 ) return CAD_MODEL_DEFEATURED_REP;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"Featured_Rep   Defeatured_Rep";
		throw isis::application_exception(errorString);
	}

	std::string CADModelRepresentation_string( e_CADModelRepresentation in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_MODEL_FEATURED_REP:
				return "Featured_Rep";
				break;
			case CAD_MODEL_DEFEATURED_REP:
				return "Defeatured_Rep";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_MODEL_FEATURED_REP   CAD_MODEL_DEFEATURED_REP";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADTreatConstraintAsAGuide CADTreatConstraintAsAGuide_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("FALSE") == 0 ) return CAD_TREAT_CONSTRAINT_AS_A_GUIDE_FALSE;
		else if	(strUpper.compare("") == 0 ) return CAD_TREAT_CONSTRAINT_AS_A_GUIDE_FALSE;
		else if	(strUpper.compare("TRUE") == 0 ) return CAD_TREAT_CONSTRAINT_AS_A_GUIDE_TRUE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"FALSE   null_string   TRUE";
		throw isis::application_exception(errorString);
	}

	std::string CADTreatConstraintAsAGuide_string( e_CADTreatConstraintAsAGuide in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_TREAT_CONSTRAINT_AS_A_GUIDE_FALSE:
				return "FALSE";
				break;
			case CAD_TREAT_CONSTRAINT_AS_A_GUIDE_TRUE:
				return "TRUE";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_TREAT_CONSTRAINT_AS_A_GUIDE_FALSE   CAD_TREAT_CONSTRAINT_AS_A_GUIDE_TRUE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADJointType CADJointType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("FIXED") == 0 ) return FIXED_JOINT;
		else if	(strUpper.compare("REVOLUTE") == 0 ) return REVOLUTE_JOINT;
		else if	(strUpper.compare("UNIVERSAL") == 0 ) return UNIVERSAL_JOINT;
		else if	(strUpper.compare("SPHERICAL") == 0 ) return SPHERICAL_JOINT;
		else if	(strUpper.compare("PRISMATIC") == 0 ) return PRISMATIC_JOINT;
		else if	(strUpper.compare("CYLINDRICAL") == 0 ) return CYLINDRICAL_JOINT;
		else if	(strUpper.compare("PLANAR") == 0 ) return PLANAR_JOINT;
		else if	(strUpper.compare("FREE") == 0 ) return FREE_JOINT;
		else if	(strUpper.compare("UNKNOWN") == 0 ) return UNKNOWN_JOINT_TYPE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"FIXED   REVOLUTE   UNIVERSAL   SPHERICAL   PRISMATIC   CYLINDRICAL   PLANAR   FREE   UNKNOWN";
		throw isis::application_exception(errorString);
	}

	std::string CADJointType_string( e_CADJointType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case FIXED_JOINT:
				return "FIXED";
				break;
			case REVOLUTE_JOINT:
				return "REVOLUTE";
				break;
			case UNIVERSAL_JOINT:
				return "UNIVERSAL";
				break;
			case SPHERICAL_JOINT:
				return "SPHERICAL";
				break;
			case PRISMATIC_JOINT:
				return "PRISMATIC";
				break;
			case CYLINDRICAL_JOINT:
				return "CYLINDRICAL";
				break;
			case PLANAR_JOINT:
				return "PLANAR";
				break;
			case FREE_JOINT:
				return "FREE";
				break;
			case UNKNOWN_JOINT_TYPE:
				return "UNKNOWN";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"FIXED_JOINT   REVOLUTE_JOINT   UNIVERSAL_JOINT   SPHERICAL_JOINT   PRISMATIC_JOINT   CYLINDRICAL_JOINT   PLANAR_JOINT   FREE_JOINT   UNKNOWN_JOINT_TYPE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_ProcessingInstruction_Primary ProcessingInstruction_Primary_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("COMPLETE_THE_HIERARCHY_FOR_LEAF_ASSEMBLIES") == 0 ) return COMPLETE_THE_HIERARCHY_FOR_LEAF_ASSEMBLIES;
		else if	(strUpper.compare("UNIQUELY_NAME_ALL_CAD_MODEL_INSTANCES") == 0 ) return UNIQUELY_NAME_ALL_CAD_MODEL_INSTANCES;
		else if	(strUpper.compare("OUTPUT_JOINT_INFORMATION") == 0 ) return OUTPUT_JOINT_INFORMATION;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"COMPLETE_THE_HIERARCHY_FOR_LEAF_ASSEMBLIES   UNIQUELY_NAME_ALL_CAD_MODEL_INSTANCES   OUTPUT_JOINT_INFORMATION";
		throw isis::application_exception(errorString);
	}

	std::string ProcessingInstruction_Primary_string( e_ProcessingInstruction_Primary in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case COMPLETE_THE_HIERARCHY_FOR_LEAF_ASSEMBLIES:
				return "COMPLETE_THE_HIERARCHY_FOR_LEAF_ASSEMBLIES";
				break;
			case UNIQUELY_NAME_ALL_CAD_MODEL_INSTANCES:
				return "UNIQUELY_NAME_ALL_CAD_MODEL_INSTANCES";
				break;
			case OUTPUT_JOINT_INFORMATION:
				return "OUTPUT_JOINT_INFORMATION";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"COMPLETE_THE_HIERARCHY_FOR_LEAF_ASSEMBLIES   UNIQUELY_NAME_ALL_CAD_MODEL_INSTANCES   OUTPUT_JOINT_INFORMATION";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_ProcessingInstruction_Secondary ProcessingInstruction_Secondary_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("NONE") == 0 ) return PROCESSING_INSTRUCTION_SECONDARY_NONE;
		else if	(strUpper.compare("PROCESSING_INSTRUCTION_SECONDARY_NONE") == 0 ) return PROCESSING_INSTRUCTION_SECONDARY_NONE;
		else if	(strUpper.compare("") == 0 ) return PROCESSING_INSTRUCTION_SECONDARY_NONE;
		else if	(strUpper.compare("VALIDATE_JOINT_INFORMATION") == 0 ) return VALIDATE_JOINT_INFORMATION;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"NONE   PROCESSING_INSTRUCTION_SECONDARY_NONE   null_string   VALIDATE_JOINT_INFORMATION";
		throw isis::application_exception(errorString);
	}

	std::string ProcessingInstruction_Secondary_string( e_ProcessingInstruction_Secondary in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case PROCESSING_INSTRUCTION_SECONDARY_NONE:
				return "NONE";
				break;
			case VALIDATE_JOINT_INFORMATION:
				return "VALIDATE_JOINT_INFORMATION";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"PROCESSING_INSTRUCTION_SECONDARY_NONE   VALIDATE_JOINT_INFORMATION";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_Metrics_JointsComponentInstanceData_Primary Metrics_JointsComponentInstanceData_Primary_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("HAS_KINEMATIC_JOINT") == 0 ) return METRICS_JOINTS_HAS_KINEMATIC_JOINT;
		else if	(strUpper.compare("LEAF_ASSEMBLY_NO_KINEMATIC_JOINTS") == 0 ) return METRICS_JOINTS_LEAF_ASSEMBLY_NO_KINEMATIC_JOINTS;
		else if	(strUpper.compare("ANCHOR_COMPONENT") == 0 ) return METRICS_JOINTS_ANCHOR_COMPONENT;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"HAS_KINEMATIC_JOINT   LEAF_ASSEMBLY_NO_KINEMATIC_JOINTS   ANCHOR_COMPONENT";
		throw isis::application_exception(errorString);
	}

	std::string Metrics_JointsComponentInstanceData_Primary_string( e_Metrics_JointsComponentInstanceData_Primary in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case METRICS_JOINTS_HAS_KINEMATIC_JOINT:
				return "HAS_KINEMATIC_JOINT";
				break;
			case METRICS_JOINTS_LEAF_ASSEMBLY_NO_KINEMATIC_JOINTS:
				return "LEAF_ASSEMBLY_NO_KINEMATIC_JOINTS";
				break;
			case METRICS_JOINTS_ANCHOR_COMPONENT:
				return "ANCHOR_COMPONENT";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"METRICS_JOINTS_HAS_KINEMATIC_JOINT   METRICS_JOINTS_LEAF_ASSEMBLY_NO_KINEMATIC_JOINTS   METRICS_JOINTS_ANCHOR_COMPONENT";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_Metrics_JointsComponentInstanceData_Secondary Metrics_JointsComponentInstanceData_Secondary_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("NONE") == 0 ) return METRICS_JOINTS_NONE;
		else if	(strUpper.compare("METRICS_JOINTS_NONE") == 0 ) return METRICS_JOINTS_NONE;
		else if	(strUpper.compare("") == 0 ) return METRICS_JOINTS_NONE;
		else if	(strUpper.compare("TREAT_AS_ONE_BODY") == 0 ) return METRICS_JOINTS_TREAT_AS_ONE_BODY;
		else if	(strUpper.compare("TREAT_AS_SEPERATE_BODIES") == 0 ) return METRICS_JOINTS_TREAT_AS_SEPERATE_BODIES;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"NONE   METRICS_JOINTS_NONE   null_string   TREAT_AS_ONE_BODY   TREAT_AS_SEPERATE_BODIES";
		throw isis::application_exception(errorString);
	}

	std::string Metrics_JointsComponentInstanceData_Secondary_string( e_Metrics_JointsComponentInstanceData_Secondary in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case METRICS_JOINTS_NONE:
				return "NONE";
				break;
			case METRICS_JOINTS_TREAT_AS_ONE_BODY:
				return "TREAT_AS_ONE_BODY";
				break;
			case METRICS_JOINTS_TREAT_AS_SEPERATE_BODIES:
				return "TREAT_AS_SEPERATE_BODIES";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"METRICS_JOINTS_NONE   METRICS_JOINTS_TREAT_AS_ONE_BODY   METRICS_JOINTS_TREAT_AS_SEPERATE_BODIES";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_Thermal_LoadConstraint Thermal_LoadConstraint_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("CONVECTION") == 0 ) return THERMAL_CONVECTION_HEAT;
		else if	(strUpper.compare("CONVECTION") == 0 ) return THERMAL_CONVECTION;
		else if	(strUpper.compare("HEATFLUX") == 0 ) return THERMAL_HEAT_FLUX;
		else if	(strUpper.compare("HEATGENERATION") == 0 ) return THERMAL_HEAT_GENERATION;
		else if	(strUpper.compare("INITIALTEMPERATURE") == 0 ) return THERMAL_INITIAL_TEMPERATURE;
		else if	(strUpper.compare("SPECIFIEDTEMPERATURE") == 0 ) return THERMAL_SPECIFIED_TEMPERATURE;
		else if	(strUpper.compare("AMBIENTTEMPERATURE") == 0 ) return THERMAL_AMBIENT_TEMPERATURE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"Convection   Convection   HeatFlux   HeatGeneration   InitialTemperature   SpecifiedTemperature   AmbientTemperature";
		throw isis::application_exception(errorString);
	}

	std::string Thermal_LoadConstraint_string( e_Thermal_LoadConstraint in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case THERMAL_CONVECTION_HEAT:
				return "Convection";
				break;
			case THERMAL_CONVECTION:
				return "Convection";
				break;
			case THERMAL_HEAT_FLUX:
				return "HeatFlux";
				break;
			case THERMAL_HEAT_GENERATION:
				return "HeatGeneration";
				break;
			case THERMAL_INITIAL_TEMPERATURE:
				return "InitialTemperature";
				break;
			case THERMAL_SPECIFIED_TEMPERATURE:
				return "SpecifiedTemperature";
				break;
			case THERMAL_AMBIENT_TEMPERATURE:
				return "AmbientTemperature";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"THERMAL_CONVECTION_HEAT   THERMAL_CONVECTION   THERMAL_HEAT_FLUX   THERMAL_HEAT_GENERATION   THERMAL_INITIAL_TEMPERATURE   THERMAL_SPECIFIED_TEMPERATURE   THERMAL_AMBIENT_TEMPERATURE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADAssemblyConstraintType CADAssemblyConstraintType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("MATE") == 0 ) return CAD_ASM_MATE;
		else if	(strUpper.compare("MATE_OFF") == 0 ) return CAD_ASM_MATE_OFF;
		else if	(strUpper.compare("ALIGN") == 0 ) return CAD_ASM_ALIGN;
		else if	(strUpper.compare("ALIGN_OFF") == 0 ) return CAD_ASM_ALIGN_OFF;
		else if	(strUpper.compare("CSYS") == 0 ) return CAD_ASM_CSYS;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"MATE   MATE_OFF   ALIGN   ALIGN_OFF   CSYS";
		throw isis::application_exception(errorString);
	}

	std::string CADAssemblyConstraintType_string( e_CADAssemblyConstraintType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_ASM_MATE:
				return "MATE";
				break;
			case CAD_ASM_MATE_OFF:
				return "MATE_OFF";
				break;
			case CAD_ASM_ALIGN:
				return "ALIGN";
				break;
			case CAD_ASM_ALIGN_OFF:
				return "ALIGN_OFF";
				break;
			case CAD_ASM_CSYS:
				return "CSYS";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_ASM_MATE   CAD_ASM_MATE_OFF   CAD_ASM_ALIGN   CAD_ASM_ALIGN_OFF   CAD_ASM_CSYS";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADFeatureGeometryType CADFeatureGeometryType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("SURFACE") == 0 ) return CAD_SURFACE;
		else if	(strUpper.compare("PLANE") == 0 ) return CAD_DATUM_PLANE;
		else if	(strUpper.compare("AXIS") == 0 ) return CAD_AXIS;
		else if	(strUpper.compare("POINT") == 0 ) return CAD_POINT;
		else if	(strUpper.compare("CSYS") == 0 ) return CAD_CSYS;
		else if	(strUpper.compare("PART") == 0 ) return CAD_PART;
		else if	(strUpper.compare("ASSEMBLY") == 0 ) return CAD_ASSEMBLY;
		else if	(strUpper.compare("FEATURE") == 0 ) return CAD_FEATURE;
		else if	(strUpper.compare("EDGE") == 0 ) return CAD_EDGE;
		else if	(strUpper.compare("INVALID") == 0 ) return CAD_FEATURE_GEOMETRY_TYPE_INVALID;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"SURFACE   PLANE   AXIS   POINT   CSYS   PART   ASSEMBLY   FEATURE   EDGE   INVALID";
		throw isis::application_exception(errorString);
	}

	std::string CADFeatureGeometryType_string( e_CADFeatureGeometryType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_SURFACE:
				return "SURFACE";
				break;
			case CAD_DATUM_PLANE:
				return "PLANE";
				break;
			case CAD_AXIS:
				return "AXIS";
				break;
			case CAD_POINT:
				return "POINT";
				break;
			case CAD_CSYS:
				return "CSYS";
				break;
			case CAD_PART:
				return "PART";
				break;
			case CAD_ASSEMBLY:
				return "ASSEMBLY";
				break;
			case CAD_FEATURE:
				return "FEATURE";
				break;
			case CAD_EDGE:
				return "EDGE";
				break;
			case CAD_FEATURE_GEOMETRY_TYPE_INVALID:
				return "INVALID";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_SURFACE   CAD_DATUM_PLANE   CAD_AXIS   CAD_POINT   CAD_CSYS   CAD_PART   CAD_ASSEMBLY   CAD_FEATURE   CAD_EDGE   CAD_FEATURE_GEOMETRY_TYPE_INVALID";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADDatumside CADDatumside_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("CAD_DATUM_SIDE_NONE") == 0 ) return CAD_DATUM_SIDE_NONE;
		else if	(strUpper.compare("NONE") == 0 ) return CAD_DATUM_SIDE_NONE;
		else if	(strUpper.compare("CAD_DATUM_SIDE_YELLOW") == 0 ) return CAD_DATUM_SIDE_YELLOW;
		else if	(strUpper.compare("SIDE_A") == 0 ) return CAD_DATUM_SIDE_YELLOW;
		else if	(strUpper.compare("CAD_DATUM_SIDE_RED") == 0 ) return CAD_DATUM_SIDE_RED;
		else if	(strUpper.compare("SIDE_B") == 0 ) return CAD_DATUM_SIDE_RED;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"CAD_DATUM_SIDE_NONE   None   CAD_DATUM_SIDE_YELLOW   Side_A   CAD_DATUM_SIDE_RED   Side_B";
		throw isis::application_exception(errorString);
	}

	std::string CADDatumside_string( e_CADDatumside in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_DATUM_SIDE_NONE:
				return "CAD_DATUM_SIDE_NONE";
				break;
			case CAD_DATUM_SIDE_YELLOW:
				return "CAD_DATUM_SIDE_YELLOW";
				break;
			case CAD_DATUM_SIDE_RED:
				return "CAD_DATUM_SIDE_RED";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_DATUM_SIDE_NONE   CAD_DATUM_SIDE_YELLOW   CAD_DATUM_SIDE_RED";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADAnalysisSolverType CADAnalysisSolverType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("NASTRAN") == 0 ) return CAD_FEM_FEAS_NASTRAN;
		else if	(strUpper.compare("ANSYS") == 0 ) return CAD_FEM_FEAS_ANSYS;
		else if	(strUpper.compare("ABAQUS") == 0 ) return CAD_FEM_FEAS_ABAQUS;
		else if	(strUpper.compare("ABAQUS_DECK_BASED") == 0 ) return CAD_FEM_FEAS_ABAQUS;
		else if	(strUpper.compare("ABAQUS_MODEL_BASED") == 0 ) return CAD_FEM_FEAS_ABAQUS;
		else if	(strUpper.compare("PATRAN_NASTRAN") == 0 ) return CAD_FEM_FEAS_PATRAN;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"NASTRAN   ANSYS   ABAQUS   ABAQUS_DECK_BASED   ABAQUS_MODEL_BASED   PATRAN_NASTRAN";
		throw isis::application_exception(errorString);
	}

	std::string CADAnalysisSolverType_string( e_CADAnalysisSolverType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_FEM_FEAS_NASTRAN:
				return "NASTRAN";
				break;
			case CAD_FEM_FEAS_ANSYS:
				return "ANSYS";
				break;
			case CAD_FEM_FEAS_ABAQUS:
				return "ABAQUS";
				break;
			case CAD_FEM_FEAS_PATRAN:
				return "PATRAN_NASTRAN";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_FEM_FEAS_NASTRAN   CAD_FEM_FEAS_ANSYS   CAD_FEM_FEAS_ABAQUS   CAD_FEM_FEAS_PATRAN";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADAnalysisMeshType CADAnalysisMeshType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("SOLID") == 0 ) return CAD_FEM_SOLID_MESH;
		else if	(strUpper.compare("SURFACE") == 0 ) return CAD_FEM_SHELL_MESH;
		else if	(strUpper.compare("SHELL") == 0 ) return CAD_FEM_SHELL_MESH;
		else if	(strUpper.compare("MIXED") == 0 ) return CAD_FEM_MIXED_MESH;
		else if	(strUpper.compare("QUILT") == 0 ) return CAD_FEM_QUILT_MESH;
		else if	(strUpper.compare("BOUNDARY") == 0 ) return CAD_FEM_BOUNDARY_MESH;
		else if	(strUpper.compare("BAR") == 0 ) return CAD_FEM_BAR_MESH;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"SOLID   SURFACE   SHELL   MIXED   QUILT   BOUNDARY   BAR";
		throw isis::application_exception(errorString);
	}

	std::string CADAnalysisMeshType_string( e_CADAnalysisMeshType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_FEM_SOLID_MESH:
				return "SOLID";
				break;
			case CAD_FEM_SHELL_MESH:
				return "SURFACE";
				break;
			case CAD_FEM_MIXED_MESH:
				return "MIXED";
				break;
			case CAD_FEM_QUILT_MESH:
				return "QUILT";
				break;
			case CAD_FEM_BOUNDARY_MESH:
				return "BOUNDARY";
				break;
			case CAD_FEM_BAR_MESH:
				return "BAR";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_FEM_SOLID_MESH   CAD_FEM_SHELL_MESH   CAD_FEM_MIXED_MESH   CAD_FEM_QUILT_MESH   CAD_FEM_BOUNDARY_MESH   CAD_FEM_BAR_MESH";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADAnalysisShellElementType CADAnalysisShellElementType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("TRIANGLE") == 0 ) return CAD_FEM_SHELL_MESH_TRIANGLE;
		else if	(strUpper.compare("TETRA4") == 0 ) return CAD_FEM_SHELL_MESH_TRIANGLE;
		else if	(strUpper.compare("TETRA10") == 0 ) return CAD_FEM_SHELL_MESH_TRIANGLE;
		else if	(strUpper.compare("QUADRANGLE") == 0 ) return CAD_FEM_SHELL_MESH_QUADRANGLE;
		else if	(strUpper.compare("PLATE4") == 0 ) return CAD_FEM_SHELL_MESH_QUADRANGLE;
		else if	(strUpper.compare("PLATE8") == 0 ) return CAD_FEM_SHELL_MESH_QUADRANGLE;
		else if	(strUpper.compare("N/A") == 0 ) return CAD_FEM_SHELL_MESH_QUADRANGLE;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"TRIANGLE   TETRA4   TETRA10   QUADRANGLE   PLATE4   PLATE8   N/A";
		throw isis::application_exception(errorString);
	}

	std::string CADAnalysisShellElementType_string( e_CADAnalysisShellElementType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_FEM_SHELL_MESH_TRIANGLE:
				return "TRIANGLE";
				break;
			case CAD_FEM_SHELL_MESH_QUADRANGLE:
				return "QUADRANGLE";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_FEM_SHELL_MESH_TRIANGLE   CAD_FEM_SHELL_MESH_QUADRANGLE";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADAnalysisElementShapeType CADAnalysisElementShapeType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("MIDPOINT_LINEAR") == 0 ) return CAD_FEM_MIDPNT_LINEAR;
		else if	(strUpper.compare("MIDPOINT_PARABOLIC") == 0 ) return CAD_FEM_MIDPNT_PARABOLIC;
		else if	(strUpper.compare("MIDPOINT_PARABOLIC_FIXED") == 0 ) return CAD_FEM_MIDPNT_PARABOLIC_FIXED;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"MIDPOINT_LINEAR   MIDPOINT_PARABOLIC   MIDPOINT_PARABOLIC_FIXED";
		throw isis::application_exception(errorString);
	}

	std::string CADAnalysisElementShapeType_string( e_CADAnalysisElementShapeType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_FEM_MIDPNT_LINEAR:
				return "MIDPOINT_LINEAR";
				break;
			case CAD_FEM_MIDPNT_PARABOLIC:
				return "MIDPOINT_PARABOLIC";
				break;
			case CAD_FEM_MIDPNT_PARABOLIC_FIXED:
				return "MIDPOINT_PARABOLIC_FIXED";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_FEM_MIDPNT_LINEAR   CAD_FEM_MIDPNT_PARABOLIC   CAD_FEM_MIDPNT_PARABOLIC_FIXED";
				throw isis::application_exception(errorString);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////
	e_CADMdlType CADMdlType_enum( const std::string &in_String)
										throw (isis::application_exception)
	{
		std::string strUpper = boost::to_upper_copy<std::string>(in_String);

		if    	(strUpper.compare("CAD_MDL_UNUSED") == 0 ) return CAD_MDL_UNUSED;
		else if	(strUpper.compare("CAD_MDL_ASSEMBLY") == 0 ) return CAD_MDL_ASSEMBLY;
		else if	(strUpper.compare("ASSEMBLY") == 0 ) return CAD_MDL_ASSEMBLY;
		else if	(strUpper.compare("CAD_MDL_PART") == 0 ) return CAD_MDL_PART;
		else if	(strUpper.compare("PART") == 0 ) return CAD_MDL_PART;

		std::stringstream errorString;
		errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_String <<
			", which is an erroneous value. Allowed values are: " <<
			"CAD_MDL_UNUSED   CAD_MDL_ASSEMBLY   Assembly   CAD_MDL_PART   Part";
		throw isis::application_exception(errorString);
	}

	std::string CADMdlType_string( e_CADMdlType in_Enum )
										throw (isis::application_exception)
	{
		switch ( in_Enum )
		{
			case CAD_MDL_UNUSED:
				return "CAD_MDL_UNUSED";
				break;
			case CAD_MDL_ASSEMBLY:
				return "CAD_MDL_ASSEMBLY";
				break;
			case CAD_MDL_PART:
				return "CAD_MDL_PART";
				break;
			default:
				std::stringstream errorString;
				errorString << "Function - " << __FUNCTION__ << ", was passed: " << in_Enum <<
					", which is an erroneous value. Allowed values are: " <<
					"CAD_MDL_UNUSED   CAD_MDL_ASSEMBLY   CAD_MDL_PART";
				throw isis::application_exception(errorString);
		}
	}

} // End Namespace