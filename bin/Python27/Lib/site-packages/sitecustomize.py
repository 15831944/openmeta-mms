import sys
import os
import os.path

if os.path.normcase(os.environ.get('ProgramFiles', 'C:\\Program Files')) not in os.path.normcase(os.path.abspath(__file__)):
    import glob
    for entry in glob.glob(os.path.join(os.path.dirname(os.path.abspath(__file__)), r"../../../../src/Python27Packages") + "/*"):
        if os.path.isdir(entry):
            sys.path.append(os.path.normpath(entry))
    sys.path.append(os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(__file__)), r"../../../../src/Python27Packages")))
    sys.path.append(os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(__file__)), r"../../../../src")))
    sys.path.append(os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(__file__)), r"../../../../meta/DesignDataPackage/lib/python")))

_this_dir = os.path.dirname(os.path.abspath(__file__))

class PythonComLoader(object):
    """
    pythoncom.py calls LoadLibrary("pythoncom27.dll"), which will load via %PATH%
    Anaconda's pythoncom27.dll (for one) doesn't include the correct SxS activation info, so trying to load it results in "An application has made an attempt to load the C runtime library incorrectly."
    load our pythoncom27.dll(which we know works) with an explicit path

    TODO: should we do the same for pywintypes27.dll ?
    """

    def find_module(self, fullname, path=None):
        if fullname == 'pythoncom':
            return self
        return None

    def load_module(self, name):
        if name in sys.modules:
            return sys.modules[name]
        import imp
        import afxres
        import traceback
        try:
            # pywin32 version 223
            return imp.load_dynamic('pythoncom', os.path.join(_this_dir, 'pywin32_system32', 'pythoncom' + ''.join(map(str, sys.version_info[0:2])) + '.dll'))
        except Exception as e:
            # maybe the user downgraded pywin32. Print the error to show something is wrong
            traceback.print_exc()
        # pywin32 version 220
        return imp.load_dynamic('pythoncom', os.path.join(os.path.dirname(afxres.__file__), 'pythoncom' + ''.join(map(str, sys.version_info[0:2])) + '.dll'))

sys.meta_path.append(PythonComLoader())
