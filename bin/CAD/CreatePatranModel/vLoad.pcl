/*****************  Example Input ***************************
Load
	ID = 1
	Type = PRESSURE
	SubCase_ID = 1
	Geometry_ID = 2
	Load_Value_ID = 1
***********************************************************/
###########################
# vLoad Class
###########################
CLASS vLoad

	CLASSWIDE STRING	c_ClassName[32],			@
						c_Load[32],					@	
						c_SubCase_ID[32],			@
						c_GEOMETRY_ID[32],			@
						c_LOAD_VALUE_ID[32],		@
						c_PRESSURE_type[32],		@	
						c_FORCE_MOMENT_type[32]					
						
						
	CLASSWIDE INTEGER	ci_LOAD_PRESSURE,			@
						ci_LOAD_FORCE_MOMENT
													
						
						#################
						# Load
						#################	
	CLASSWIDE INTEGER	count,									@
						count_temp,							@
						iD(VIRTUAL),							@
						load_SubCase_ID(VIRTUAL)					
	CLASSWIDE INTEGER	load_Type(VIRTUAL)	
	CLASSWIDE INTEGER	load_Geometry_ID(VIRTUAL),					@
						load_Load_Value_ID(VIRTUAL)					
				
	CLASSWIDE STRING  errorMsg[1024] 
	CLASSWIDE INTEGER errorLevel				
################################################################################
FUNCTION initialize()
	c_ClassName = "vLoad"
	
	c_Load =						"Load"

	c_SubCase_ID	= 				"SubCase_ID"
	c_GEOMETRY_ID =					"Geometry_ID"
	c_LOAD_VALUE_ID =				"Load_Value_ID"
	# Use lower case for Pressure and Force_Moment because these string will appear in the Patran Model
	# See vLoad.get_Load_InPatMdl_Name
	c_PRESSURE_type =				"Pressure"	
	c_FORCE_MOMENT_type =			"Force_Moment"	

	ci_LOAD_PRESSURE =				1
	ci_LOAD_FORCE_MOMENT =			2		
	
	count = 0
	count_temp = 0
END FUNCTION
################################################################################
FUNCTION allocateArrays()
	IF ( count > 0 ) THEN
		sys_allocate_array (iD,   					1, 	count )
		sys_allocate_array (load_SubCase_ID,   			1, 	count )
		sys_allocate_array (load_Type,   				1, 	count )
		sys_allocate_array (load_Geometry_ID,   		1, 	count )
		sys_allocate_array (load_Load_Value_ID,   		1, 	count )		
	END IF
	
END FUNCTION
################################################################################
FUNCTION get_c_Load()
	RETURN c_Load
END FUNCTION
################################################################################
FUNCTION increment_Count()
	count += 1
END FUNCTION
################################################################################
FUNCTION get_Count()
	return count
END FUNCTION
################################################################################
FUNCTION readNameValuePairs( 	modelFile,						@
								in_out_LineNum,					@
								in_out_Buffer)						
	INTEGER modelFile

	INTEGER in_out_LineNum
	STRING	in_out_Buffer[]
	
	STRING  functionName[64] 
	functionName = c_ClassName // ".readNameValuePairs"	

	LOGICAL equalsSignFound = TRUE
	LOGICAL	shouldContinue
	STRING  buffer[2028]	
	
	INTEGER length	

	STRING nameField[128]
	STRING valueField[128]	
	
	count_temp += 1	
	
	buffer = ""
	WHILE ( equalsSignFound )	
		INTEGER readStrStatus
		readStrStatus = text_read_string( modelFile, buffer, length )
		IF ( readStrStatus != 0 ) THEN
			buffer = ""
			IF (readStrStatus == -1) THEN
				equalsSignFound = FALSE
			END IF
		ELSE
			in_out_LineNum += 1
			shouldContinue = FALSE			
			
			buffer = vModelDefinitionReader.getBufferNoComments( in_out_LineNum, buffer, shouldContinue )				
			# shouldContinue == TRUE means that the line was blank or contained only a comment
			If (shouldContinue ) THEN CONTINUE 
			
			IF ( str_index( buffer, "=" ) == 0 ) THEN
				equalsSignFound = FALSE					
			ELSE
				nameField = str_token( buffer,"=", 1, TRUE )		
				valueField = str_token( buffer,"=", 2, TRUE )
				SWITCH ( nameField )					
					CASE (vConstants.get_c_ID())
					  iD(count_temp) =  vCommon.ID_toInt(valueField)
					  IF (  iD(count_temp) < 0 ) THEN
							errorMsg = "Could not convert to a positive non-zero integer, String: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR() 
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
					  END IF  
					  		  							  
					CASE (c_SubCase_ID)
					  load_SubCase_ID(count_temp) =  vCommon.ID_toInt(valueField)
					  IF (  load_SubCase_ID(count_temp) < 0 ) THEN
							errorMsg = "Could not convert to a positive non-zero integer, String: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR() 
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
					  END IF 

					  CASE (c_GEOMETRY_ID)
					  load_Geometry_ID(count_temp) =  vCommon.ID_toInt(valueField)
					  IF (  load_Geometry_ID(count_temp) < 0 ) THEN
							errorMsg = "Could not convert to a positive non-zero integer, String: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR() 
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
					  END IF
										
					CASE (c_LOAD_VALUE_ID)
					  load_Load_Value_ID(count_temp) =  vCommon.ID_toInt(valueField)
					  IF (  load_Load_Value_ID(count_temp) < 0 ) THEN
							errorMsg = "Could not convert to a positive non-zero integer, String: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR() 
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
					  END IF 
										
					CASE (vConstants.get_c_Type())  
						load_Type(count_temp) =  vLoad.load_Type_toInt(valueField)
						IF (  load_Type(count_temp) < 0 ) THEN
							errorMsg = "Invalid value in name-value pair: " // buffer // ", Valid value(s): "  // vLoad.load_Type_validStrings()  // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR() 
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
					  END IF	  					    			
											  
					DEFAULT
						errorMsg = "Unexpected name-value pair: " // buffer // ", Line number: "  // str_from_integer(in_out_LineNum)
						errorLevel = vLogger.get_ci_ERROR() 
						vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
				END SWITCH	

				
			END IF

		END IF

	END WHILE		

	in_out_Buffer = buffer
	
	WRITE ( "Function: " // functionName  // ", Returned Buffer: " // buffer )
	
END FUNCTION
################################################################################
FUNCTION logData()

	text_write_string( vLogger.getChannel(), "")
	text_write_string( vLogger.getChannel(), "-------- Begin " // c_Load // " --------")	
	text_write_string( vLogger.getChannel(), "   Count: " // str_from_integer(count))
	INTEGER i
		
	FOR ( i = 1 TO count )
			text_write_string( vLogger.getChannel(), "" )	
			text_write_string( vLogger.getChannel(), "   " // vConstants.get_c_ID() 		// " = " // vCommon.ID_toStr(iD(i)) )
			text_write_string( vLogger.getChannel(), "   " // vConstants.get_c_TYPE() 		// " = " // vLoad.load_Type_toStr(load_Type(i)) )
			text_write_string( vLogger.getChannel(), "   " // c_SUBCASE_ID 					// " = " // vCommon.ID_toStr(load_Subcase_ID(i)) )
			text_write_string( vLogger.getChannel(), "   " // c_GEOMETRY_ID 				// " = " // vCommon.ID_toStr(load_Geometry_ID(i)) )
			text_write_string( vLogger.getChannel(), "   " // c_LOAD_VALUE_ID 				// " = " // vCommon.ID_toStr(load_Load_Value_ID(i)) )		
	END FOR		

	text_write_string( vLogger.getChannel(), "-------- END " // c_Load // " --------")			
END FUNCTION
################################################################################
FUNCTION check()

	STRING  functionName[64] 
	functionName = c_ClassName // ".check"	

	Integer i
	INTEGER returnStatus = 0	
	INTEGER returnStatus_temp = 0		
	
	INTEGER subCase_index
	INTEGER geometry_index
	INTEGER load_Value_index	
	
	STRING headingName[64]	
	headingName = c_Load
	
	REAL	value_x,     value_y,     value_z,     value_x11,     value_y22,     value_z33
	Logical value_x_set, value_y_set, value_z_set, value_x11_set, value_y22_set, value_z33_set		
	
	IF ( vCommon.iDsOccurMoreThanOnce(count, iD)) THEN
		errorMsg = " A " // headingName // " entry has an ID that appears more than once.  Make sure each " // headingName  // " entry has a unique ID"
		errorLevel = vLogger.get_ci_ERROR()
		vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
		returnStatus = -1							
	END IF		
	
	
	FOR ( i = 1 TO count )
		subCase_index = vSubcase.getIndex( load_SubCase_ID(i))
		geometry_index = vGeometry.getIndex( load_Geometry_ID(i))
		load_Value_index = vLoad_Value.getIndex( load_Load_Value_ID(i))
	
		IF ( subCase_index == vConstants.get_ci_Undefined() ) THEN
				errorMsg = "Load ID: " // str_from_integer(iD(i)) // ", missing Subcase with ID: "  // str_from_integer(load_SubCase_ID(i))
			errorLevel = vLogger.get_ci_ERROR()
			vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )	
			returnStatus = -1						
		END IF

		IF ( geometry_index == vConstants.get_ci_Undefined() ) THEN
			errorMsg = "Load ID: " // str_from_integer(D(i)) // ", missing Geometry with ID: "  // str_from_integer(load_Geometry_ID(i))
			errorLevel = vLogger.get_ci_ERROR()
			vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )	
			returnStatus = -1				
		END IF

		IF ( load_Value_index == vConstants.get_ci_Undefined() ) THEN
			errorMsg = "Load ID: " // str_from_integer(iD(i)) // ", missing Load Value with ID: "  // str_from_integer(load_Load_Value_ID(i))
			errorLevel = vLogger.get_ci_ERROR()
			vLogger.addErrorMessage(  errorLevel, functionName, errorMsg ) 	
			returnStatus = -1				
		END IF
		
		# Currently not supporting moment loads.  This is because vPatranUtils.applyLoad_Force_Total only supports total force
		returnStatus_temp = vLoad_Value.getLoadValues( load_Load_Value_ID(i), @
								value_x,     value_y,     value_z,     value_x11,     value_y22,     value_z33, @
								value_x_set, value_y_set, value_z_set, value_x11_set, value_y22_set, value_z33_set	)
		dump value_x11,     value_y22,     value_z33
		dump value_x11_set, value_y22_set, value_z33_set
		IF ( returnStatus_temp != 0 ) THEN
			errorMsg = "Load ID: " // str_from_integer(iD(i)) // ", error vLoad_Value.getLoadValues failed for Load_Value ID: "  // str_from_integer(load_Load_Value_ID(i))
			errorLevel = vLogger.get_ci_ERROR()
			vLogger.addErrorMessage(  errorLevel, functionName, errorMsg ) 	
			returnStatus = -1			
		ELSE
			IF ( value_x11_set || value_y22_set || value_z33_set ) THEN
				errorMsg = "Load ID: " // str_from_integer(iD(i)) // ", Moment loads currently NOT supported, found Moment (x11_Value, y22_Value, and/or z33_Value), Load_Value ID: "  // str_from_integer(load_Load_Value_ID(i))
				errorLevel = vLogger.get_ci_ERROR()
				vLogger.addErrorMessage(  errorLevel, functionName, errorMsg ) 	
			returnStatus = -1					
			END IF		
		END IF
		
	END FOR

	return returnStatus

END FUNCTION
################################################################################
FUNCTION load_Type_toStr ( in_load_Type_ID )
	
	INTEGER in_load_Type_ID

	SWITCH(in_load_Type_ID)
		CASE(ci_LOAD_PRESSURE)
			return c_PRESSURE_type
		CASE (ci_LOAD_FORCE_MOMENT) 
			return c_FORCE_MOMENT_type
		DEFAULT
			return "ERROR"
	END SWITCH


END FUNCTION
#------------------------------------------------------------------------------
FUNCTION load_Type_toInt ( in_load_Type_str )

	STRING in_load_Type_str[]
	
	SWITCH(in_load_Type_str)
		CASE(c_PRESSURE_type )
			return ci_LOAD_PRESSURE
		CASE(c_FORCE_MOMENT_type )  
			return ci_LOAD_FORCE_MOMENT	

		DEFAULT
			return -1
	END SWITCH
	
END FUNCTION
#------------------------------------------------------------------------------
FUNCTION load_Type_validStrings()
	# if more are added, the strings would be separated by spaces
	return c_PRESSURE_type 	// "  " // c_FORCE_MOMENT_type
END FUNCTION
################################################################################
FUNCTION getIndex ( in_ID )

	INTEGER in_ID
	INTEGER I
	FOR ( i = 1 TO count )
		IF ( in_ID == id(i)) THEN Return i
	END FOR
	
	return vConstants.get_ci_Undefined()
END FUNCTION
################################################################################
FUNCTION get_InPatMdl_Name( in_Index )
	INTEGER in_Index
	RETURN "L" // str_from_integer(iD(in_Index)) // "_" // vLoad.load_Type_toStr(load_Type(in_Index))
END FUNCTION
###############################################################################
FUNCTION get_Load_InPatMdl_Name( in_Index )
	INTEGER in_Index
	return vLoad.get_InPatMdl_Name( in_Index )
END FUNCTION
###############################################################################
FUNCTION get_Load_InPatMdl_Names( out_Names )

	STRING  out_Names[]()
	
	INTEGER i
	
	FOR ( i = 1 to count )
		out_Names(i) = vLoad.get_InPatMdl_Name(i)
	END FOR
	
END FUNCTION
################################################################################
FUNCTION createLoads()
	STRING  functionName[64] 
	functionName = c_ClassName // ".createLoads"	

	INTEGER i
	INTEGER returnStatus = 0
	INTEGER returnStatus_temp = 0
	
	STRING headingName[64]
	headingName = c_Load	
	
	STRING mdl_SurfaceID_string[1024]

	mdl_SurfaceID_string = ""
	
	real scalarValue
	
	STRING lbc_name[31]	
	
	FOR ( i = 1 TO count )	
	
		IF ( load_Type(i) != ci_LOAD_PRESSURE && load_Type(i) != ci_LOAD_FORCE_MOMENT ) THEN	
			errorMsg = "Unsupported load type, only " // vLoad.load_Type_validStrings() // " supported.  Load ID: " // str_from_integer(iD(i))
			errorLevel = vLogger.get_ci_ERROR()	
			vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
			returnStatus_temp = -1
		END IF
	
		returnStatus =  vGeometry.getGeometrySurfaceName( load_Geometry_ID(i), mdl_SurfaceID_string )
		
		IF  (returnStatus != 0 ) THEN	
			errorMsg = headingName // ", ID: "  // str_from_integer(iD(i)) // ", could not retrieve Patran model surface name(s).  ReturnStatus: " // str_from_integer(returnStatus)
			errorLevel = vLogger.get_ci_ERROR()
			vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
			returnStatus_temp = -1											
			CONTINUE
		END IF						
					
		IF ( str_length( mdl_SurfaceID_string ) == 0 ) THEN
			errorMsg = headingName // ", ID: "  // str_from_integer(iD(i)) // ", could not retrieve Patran model surface name(s)." 
			errorLevel = vLogger.get_ci_ERROR()
			vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
			returnStatus_temp = -1											
			CONTINUE
		END IF				
	
		###############
		# Pressure
		###############		
	
		IF ( load_Type(i) == ci_LOAD_PRESSURE ) THEN
								
			returnStatus = vLoad_Value.getLoadScalar( load_Load_Value_ID(i), scalarValue )	

			IF ( returnStatus != 0 ) THEN	
				errorMsg = headingName // ", ID: "  // str_from_integer(iD(i)) // ", vLoad_Value.getLoadScalar failed.  ReturnStatus: " // str_from_integer(returnStatus)
				errorLevel = vLogger.get_ci_ERROR()
				vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
				returnStatus_temp = -1											
				CONTINUE
			END IF		
								
			IF ( scalarValue == 0.0 ) THEN
				errorMsg = "Zero load value. Load must be != 0, Load ID: " //  str_from_integer(iD(i)) // ", Load Value ID: " // str_from_integer(load_Load_Value_ID(i))
				errorLevel = vLogger.get_ci_ERROR()	
				vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )			
				returnStatus_temp = -1
				CONTINUE				
			END IF					
						
			lbc_name = vLoad.get_Load_InPatMdl_Name(i)
			returnStatus = vPatranUtils.applyLoad_Pressure( iD(i), scalarValue, mdl_SurfaceID_string, lbc_name )	
			
			IF ( returnStatus != 0 ) THEN
				errorMsg = headingName // ", ID: "  // str_from_integer(iD(i)) // ", vPatranUtils.applyLoad_Pressure returned an error." 
				errorLevel = vLogger.get_ci_ERROR()
				vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
				returnStatus_temp = -1											
				CONTINUE
			END IF					
			
		END IF	
		
		###############
		# Force Moment
		###############					
		IF ( load_Type(i) == ci_LOAD_FORCE_MOMENT ) THEN
		
			REAL	value_x,     value_y,     value_z,     value_x11,     value_y22,     value_z33
			Logical value_x_set, value_y_set, value_z_set, value_x11_set, value_y22_set, value_z33_set		
		
		
			returnStatus = vLoad_Value.getLoadValues( load_Load_Value_ID(i), @
									value_x,     value_y,     value_z,     value_x11,     value_y22,     value_z33, @
									value_x_set, value_y_set, value_z_set, value_x11_set, value_y22_set, value_z33_set	)
										
			IF ( returnStatus != 0 ) THEN	
				errorMsg = headingName // ", ID: "  // str_from_integer(iD(i)) // ",  vLoad_Value.getLoadValues failed.  ReturnStatus: " // str_from_integer(returnStatus)
				errorLevel = vLogger.get_ci_ERROR()
				vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
				returnStatus_temp = -1											
				CONTINUE
			END IF		
									
			IF ( !value_x_set && !value_y_set && !value_z_set && !value_x11_set && !value_y22_set && !value_z33_set ) THEN	
				errorMsg = headingName // "No Force/Moment values set, Load ID: " //  str_from_integer(iD(i)) // ", Load Value ID: " // str_from_integer(load_Load_Value_ID(i))
				errorLevel = vLogger.get_ci_ERROR()	
				vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )			
				returnStatus_temp = -1
				CONTINUE
			END IF

			lbc_name = vLoad.get_Load_InPatMdl_Name(i)
			
			returnStatus = vPatranUtils.applyLoad_Force_Total( iD(i), 		@
									value_x,     value_y,     value_z,   	@
									value_x_set, value_y_set, value_z_set,	@
									mdl_SurfaceID_string, lbc_name )			
			
			##############################################################
			# Example of how to call Force_Moment, if this is implemented
			##############################################################
			# returnStatus = vPatranUtils.applyLoad_Force_Moment( iD(i), 													@
			# 						value_x,     value_y,     value_z,     value_x11,     value_y22,     value_z33, 		@
			#						value_x_set, value_y_set, value_z_set, value_x11_set, value_y22_set, value_z33_set,		@
			#						mdl_SurfaceID_string, lbc_name )	
									
			
			IF ( returnStatus != 0 ) THEN
				errorMsg = headingName // ", ID: "  // str_from_integer(iD(i)) // ", vPatranUtils.applyLoad_Force_Moment returned an error." 
				errorLevel = vLogger.get_ci_ERROR()
				vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
				returnStatus_temp = -1											
				CONTINUE
			END IF										
			
		END IF
		
	END FOR
	
	RETURN returnStatus_temp
	
END FUNCTION	
###############################################################################	


END CLASS